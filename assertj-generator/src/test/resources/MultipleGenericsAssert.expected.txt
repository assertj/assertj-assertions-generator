package org.assertj.assertions.generator.data.generic;

/**
 * {@link MultipleGenerics<T,U,V,W>} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractMultipleGenericsAssert<T,U,V,W>} instead.
 */
@javax.annotation.processing.Generated(value="assertj-assertions-generator")
public class MultipleGenericsAssert<T,U,V,W> extends AbstractMultipleGenericsAssert<MultipleGenericsAssert<T,U,V,W>, MultipleGenerics<T,U,V,W>, T,U,V,W> {

  /**
   * Creates a new <code>{@link MultipleGenericsAssert<T,U,V,W>}</code> to make assertions on actual MultipleGenerics<T,U,V,W>.
   * @param actual the MultipleGenerics<T,U,V,W> we want to make assertions on.
   */
  public MultipleGenericsAssert(MultipleGenerics<T,U,V,W> actual) {
    super(actual, MultipleGenericsAssert.class);
  }

  /**
   * An entry point for MultipleGenericsAssert<T,U,V,W> to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myMultipleGenerics<T,U,V,W>)</code> and get specific assertion with code completion.
   * @param actual the MultipleGenerics<T,U,V,W> we want to make assertions on.
   * @return a new <code>{@link MultipleGenericsAssert<T,U,V,W>}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static <T,U,V,W> MultipleGenericsAssert<T,U,V,W> assertThat(MultipleGenerics<T,U,V,W> actual) {
    return new MultipleGenericsAssert<T,U,V,W>(actual);
  }
}
