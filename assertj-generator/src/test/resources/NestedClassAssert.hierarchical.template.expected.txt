package org.assertj.assertions.generator.data;

/**
 * {@link ${nestedClass}} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link Abstract${nestedClass}Assert} instead.
 */
@javax.annotation.processing.Generated(value="assertj-assertions-generator")
public class ${nestedClass}Assert extends Abstract${nestedClass}Assert<${nestedClass}Assert, ${nestedClass}> {

  /**
   * Creates a new <code>{@link ${nestedClass}Assert}</code> to make assertions on actual ${nestedClass}.
   * @param actual the ${nestedClass} we want to make assertions on.
   */
  public ${nestedClass}Assert(${nestedClass} actual) {
    super(actual, ${nestedClass}Assert.class);
  }

  /**
   * An entry point for ${nestedClass}Assert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(my${nestedClass})</code> and get specific assertion with code completion.
   * @param actual the ${nestedClass} we want to make assertions on.
   * @return a new <code>{@link ${nestedClass}Assert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ${nestedClass}Assert assertThat(${nestedClass} actual) {
    return new ${nestedClass}Assert(actual);
  }
}
