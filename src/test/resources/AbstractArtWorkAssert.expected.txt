package org.assertj.assertions.generator.data.art;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ArtWork} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractArtWorkAssert<S extends AbstractArtWorkAssert<S, A>, A extends ArtWork> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractArtWorkAssert}</code> to make assertions on actual ArtWork.
   * @param actual the ArtWork we want to make assertions on.
   */
  protected AbstractArtWorkAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ArtWork's title is equal to the given one.
   * @param title the given title to compare the actual ArtWork's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ArtWork's title is not equal to the given one.
   */
  public S hasTitle(String title) {
    // check that actual ArtWork we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ArtWork's title is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ArtWork's title is not <code>null</code>.
   */
  public S hasNullTitle() {
    // check that actual ArtWork we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualTitle = actual.getTitle();
    if (actualTitle != null) {
      failWithMessage(assertjErrorMessage, actual, actualTitle);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ArtWork's title is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ArtWork's title is <code>null</code>.
   */
  public S hasNotNullTitle() {
    // check that actual ArtWork we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualTitle = actual.getTitle();
    if (actualTitle == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ArtWork's creator is equal to the given one.
   * @param creator the given creator to compare the actual ArtWork's creator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ArtWork's creator is not equal to the given one.
   */
  public S hasCreator(String creator) {
    // check that actual ArtWork we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCreator = actual.creator;
    if (!Objects.areEqual(actualCreator, creator)) {
      failWithMessage(assertjErrorMessage, actual, creator, actualCreator);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ArtWork's creator is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ArtWork's creator is not <code>null</code>.
   */
  public S hasNullCreator() {
    // check that actual ArtWork we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creator of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualCreator = actual.creator;
    if (actualCreator != null) {
      failWithMessage(assertjErrorMessage, actual, actualCreator);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ArtWork's creator is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ArtWork's creator is <code>null</code>.
   */
  public S hasNotNullCreator() {
    // check that actual ArtWork we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting creator of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualCreator = actual.creator;
    if (actualCreator == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
