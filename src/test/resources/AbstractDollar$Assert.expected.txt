package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Dollar$} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractDollar$Assert<S extends AbstractDollar$Assert<S, A>, A extends Dollar$> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractDollar$Assert}</code> to make assertions on actual Dollar$.
   * @param actual the Dollar$ we want to make assertions on.
   */
  protected AbstractDollar$Assert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Dollar$'s test is equal to the given one.
   * @param test the given test to compare the actual Dollar$'s test to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Dollar$'s test is not equal to the given one.
   */
  public S hasTest(String test) {
    // check that actual Dollar$ we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting test of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTest = actual.test;
    if (!Objects.areEqual(actualTest, test)) {
      failWithMessage(assertjErrorMessage, actual, test, actualTest);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Dollar$'s test is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Dollar$'s test is not <code>null</code>.
   */
  public S hasNullTest() {
    // check that actual Dollar$ we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting test of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualTest = actual.test;
    if (actualTest != null) {
      failWithMessage(assertjErrorMessage, actual, actualTest);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Dollar$'s test is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Dollar$'s test is <code>null</code>.
   */
  public S hasNotNullTest() {
    // check that actual Dollar$ we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting test of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualTest = actual.test;
    if (actualTest == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
