package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link FieldPropertyClash} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractFieldPropertyClashAssert<S extends AbstractFieldPropertyClashAssert<S, A>, A extends FieldPropertyClash> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractFieldPropertyClashAssert}</code> to make assertions on actual FieldPropertyClash.
   * @param actual the FieldPropertyClash we want to make assertions on.
   */
  protected AbstractFieldPropertyClashAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual FieldPropertyClash is boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash is not boolean.
   */
  public S isBoolean() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isBoolean()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash is boolean but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash is not boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash is boolean.
   */
  public S isNotBoolean() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isNotBoolean()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash is not boolean but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash will not be outside.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash will be outside.
   */
  public S willNotBeOutside() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.willNotBeOutside()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash will not be outside but will be.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash will be outside.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash will not be outside.
   */
  public S willBeOutside() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.willNotBeOutside()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash will be outside but will not be.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash should not be somewhere.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash should be somewhere.
   */
  public S shouldNotBeSomewhere() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.shouldNotBeSomewhere()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash should not be somewhere but should be.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash should be somewhere.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash should not be somewhere.
   */
  public S shouldBeSomewhere() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.shouldNotBeSomewhere()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash should be somewhere but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash's string is equal to the given one.
   * @param string the given string to compare the actual FieldPropertyClash's string to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash's string is not equal to the given one.
   */
  public S hasString(String string) {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting string of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualString = actual.getString();
    if (!Objects.areEqual(actualString, string)) {
      failWithMessage(assertjErrorMessage, actual, string, actualString);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash's string is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash's string is not <code>null</code>.
   */
  public S hasNullString() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting string of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualString = actual.getString();
    if (actualString != null) {
      failWithMessage(assertjErrorMessage, actual, actualString);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash's string is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash's string is <code>null</code>.
   */
  public S hasNotNullString() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting string of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualString = actual.getString();
    if (actualString == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash will be upside down.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash will not be upside down.
   */
  public S willBeUpsideDown() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.willBeUpsideDown()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash will be upside down but will not be.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash will not be upside down.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash will be upside down.
   */
  public S willNotBeUpsideDown() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.willBeUpsideDown()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash will not be upside down but will be.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash's actual is equal to the given one.
   * @param expectedActual the given actual to compare the actual FieldPropertyClash's actual to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash's actual is not equal to the given one.
   */
  public S hasActual(String expectedActual) {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting actual of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualActual = actual.actual;
    if (!Objects.areEqual(actualActual, expectedActual)) {
      failWithMessage(assertjErrorMessage, actual, expectedActual, actualActual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash's actual is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash's actual is not <code>null</code>.
   */
  public S hasNullActual() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting actual of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualActual = actual.actual;
    if (actualActual != null) {
      failWithMessage(assertjErrorMessage, actual, actualActual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual FieldPropertyClash's actual is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash's actual is <code>null</code>.
   */
  public S hasNotNullActual() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting actual of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualActual = actual.actual;
    if (actualActual == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
