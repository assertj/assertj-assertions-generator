package org.assertj.assertions.generator.data;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * Abstract base class for {@link InterferencePrimitives} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractInterferencePrimitivesAssert<S extends AbstractInterferencePrimitivesAssert<S, A>, A extends InterferencePrimitives> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractInterferencePrimitivesAssert}</code> to make assertions on actual InterferencePrimitives.
   * @param actual the InterferencePrimitives we want to make assertions on.
   */
  protected AbstractInterferencePrimitivesAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual InterferencePrimitives is a boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual InterferencePrimitives is not a boolean.
   */
  public S isABoolean() {
    // check that actual InterferencePrimitives we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.deepEquals(Boolean.FALSE, actual.isABoolean())) {
      failWithMessage("\nExpecting that actual InterferencePrimitives is a boolean but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InterferencePrimitives is not a boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual InterferencePrimitives is a boolean.
   */
  public S isNotABoolean() {
    // check that actual InterferencePrimitives we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.deepEquals(Boolean.FALSE, actual.isNotABoolean())) {
      failWithMessage("\nExpecting that actual InterferencePrimitives is not a boolean but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InterferencePrimitives is not working.
   * @return this assertion object.
   * @throws AssertionError - if the actual InterferencePrimitives is working.
   */
  public S isNotWorking() {
    // check that actual InterferencePrimitives we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isNotWorking()) {
      failWithMessage("\nExpecting that actual InterferencePrimitives is not working but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InterferencePrimitives is working.
   * @return this assertion object.
   * @throws AssertionError - if the actual InterferencePrimitives is not working.
   */
  public S isWorking() {
    // check that actual InterferencePrimitives we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isWorking()) {
      failWithMessage("\nExpecting that actual InterferencePrimitives is working but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
