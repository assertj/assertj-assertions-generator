package org.assertj.assertions.generator.data;

import org.assertj.assertions.generator.data.art.AbstractArtWorkAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Movie} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMovieAssert<S extends AbstractMovieAssert<S, A>, A extends Movie> extends AbstractArtWorkAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMovieAssert}</code> to make assertions on actual Movie.
   * @param actual the Movie we want to make assertions on.
   */
  protected AbstractMovieAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Movie's publicCategory is equal to the given one.
   * @param publicCategory the given publicCategory to compare the actual Movie's publicCategory to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's publicCategory is not equal to the given one.
   */
  public S hasPublicCategory(Movie.PublicCategory publicCategory) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting publicCategory of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Movie.PublicCategory actualPublicCategory = actual.getPublicCategory();
    if (!Objects.areEqual(actualPublicCategory, publicCategory)) {
      failWithMessage(assertjErrorMessage, actual, publicCategory, actualPublicCategory);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's publicCategory is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's publicCategory is not <code>null</code>.
   */
  public S hasNullPublicCategory() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting publicCategory of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Movie.PublicCategory actualPublicCategory = actual.getPublicCategory();
    if (actualPublicCategory != null) {
      failWithMessage(assertjErrorMessage, actual, actualPublicCategory);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's publicCategory is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's publicCategory is <code>null</code>.
   */
  public S hasNotNullPublicCategory() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting publicCategory of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Movie.PublicCategory actualPublicCategory = actual.getPublicCategory();
    if (actualPublicCategory == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's releaseDate is equal to the given one.
   * @param releaseDate the given releaseDate to compare the actual Movie's releaseDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's releaseDate is not equal to the given one.
   */
  public S hasReleaseDate(java.util.Date releaseDate) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting releaseDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Date actualReleaseDate = actual.getReleaseDate();
    if (!Objects.areEqual(actualReleaseDate, releaseDate)) {
      failWithMessage(assertjErrorMessage, actual, releaseDate, actualReleaseDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's releaseDate is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's releaseDate is not <code>null</code>.
   */
  public S hasNullReleaseDate() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting releaseDate of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    java.util.Date actualReleaseDate = actual.getReleaseDate();
    if (actualReleaseDate != null) {
      failWithMessage(assertjErrorMessage, actual, actualReleaseDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's releaseDate is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's releaseDate is <code>null</code>.
   */
  public S hasNotNullReleaseDate() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting releaseDate of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    java.util.Date actualReleaseDate = actual.getReleaseDate();
    if (actualReleaseDate == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's producer is equal to the given one.
   * @param producer the given producer to compare the actual Movie's producer to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's producer is not equal to the given one.
   */
  public S hasProducer(String producer) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting producer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualProducer = actual.producer;
    if (!Objects.areEqual(actualProducer, producer)) {
      failWithMessage(assertjErrorMessage, actual, producer, actualProducer);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's producer is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's producer is not <code>null</code>.
   */
  public S hasNullProducer() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting producer of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualProducer = actual.producer;
    if (actualProducer != null) {
      failWithMessage(assertjErrorMessage, actual, actualProducer);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's producer is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's producer is <code>null</code>.
   */
  public S hasNotNullProducer() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting producer of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualProducer = actual.producer;
    if (actualProducer == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's rating is equal to the given one.
   * @param rating the given rating to compare the actual Movie's rating to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's rating is not equal to the given one.
   */
  public S hasRating(double rating) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting rating of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check value for rating
    double actualRating = actual.rating;
    if (actualRating != rating) {
      failWithMessage(assertjErrorMessage, actual, rating, actualRating);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's rating is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param rating the value to compare the actual Movie's rating to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's rating is not close enough to the given value.
   */
  public S hasRatingCloseTo(double rating, double assertjOffset) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    double actualRating = actual.rating;

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting rating:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualRating, rating, assertjOffset, Math.abs(rating - actualRating));

    // check
    Assertions.assertThat(actualRating).overridingErrorMessage(assertjErrorMessage).isCloseTo(rating, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie is xrated.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie is not xrated.
   */
  public S isXrated() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.xrated) {
      failWithMessage("\nExpecting that actual Movie is xrated but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie is not xrated.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie is xrated.
   */
  public S isNotXrated() {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.xrated) {
      failWithMessage("\nExpecting that actual Movie is not xrated but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
