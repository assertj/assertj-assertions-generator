package org.assertj.assertions.generator.data.generic;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;

/**
 * Abstract base class for {@link MultipleGenerics<T,U,V,W>} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractMultipleGenericsAssert<S extends AbstractMultipleGenericsAssert<S, A, T,U,V,W>, A extends MultipleGenerics<T,U,V,W>, T,U,V,W> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMultipleGenericsAssert<T,U,V,W>}</code> to make assertions on actual MultipleGenerics<T,U,V,W>.
   * @param actual the MultipleGenerics<T,U,V,W> we want to make assertions on.
   */
  protected AbstractMultipleGenericsAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s foo is equal to the given one.
   * @param foo the given foo to compare the actual MultipleGenerics<T,U,V,W>'s foo to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MultipleGenerics<T,U,V,W>'s foo is not equal to the given one.
   */
  public S hasFoo(java.util.Map<T,U> foo) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting foo of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.util.Map<T,U> actualFoo = actual.getFoo();
    if (!Objects.deepEquals(actualFoo, foo)) {
      failWithMessage(assertjErrorMessage, actual, foo, actualFoo);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s myGeneric is equal to the given one.
   * @param myGeneric the given myGeneric to compare the actual MultipleGenerics<T,U,V,W>'s myGeneric to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MultipleGenerics<T,U,V,W>'s myGeneric is not equal to the given one.
   */
  public S hasMyGeneric(MyGeneric<W> myGeneric) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting myGeneric of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    MyGeneric<W> actualMyGeneric = actual.getMyGeneric();
    if (!Objects.deepEquals(actualMyGeneric, myGeneric)) {
      failWithMessage(assertjErrorMessage, actual, myGeneric, actualMyGeneric);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s value is equal to the given one.
   * @param value the given value to compare the actual MultipleGenerics<T,U,V,W>'s value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MultipleGenerics<T,U,V,W>'s value is not equal to the given one.
   */
  public S hasValue(U value) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    U actualValue = actual.getValue();
    if (!Objects.deepEquals(actualValue, value)) {
      failWithMessage(assertjErrorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s clone is equal to the given one.
   * @param clone the given clone to compare the actual MultipleGenerics<T,U,V,W>'s clone to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MultipleGenerics<T,U,V,W>'s clone is not equal to the given one.
   */
  public S hasClone(MultipleGenerics<T,U,V,W> clone) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting clone of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    MultipleGenerics<T,U,V,W> actualClone = actual.clone;
    if (!Objects.deepEquals(actualClone, clone)) {
      failWithMessage(assertjErrorMessage, actual, clone, actualClone);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s field is equal to the given one.
   * @param field the given field to compare the actual MultipleGenerics<T,U,V,W>'s field to.
   * @return this assertion object.
   * @throws AssertionError - if the actual MultipleGenerics<T,U,V,W>'s field is not equal to the given one.
   */
  public S hasField(T field) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting field of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    T actualField = actual.field;
    if (!Objects.deepEquals(actualField, field)) {
      failWithMessage(assertjErrorMessage, actual, field, actualField);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s movies contains the given org.assertj.assertions.generator.data.Movie elements.
   * @param movies the given elements that should be contained in actual MultipleGenerics<T,U,V,W>'s movies.
   * @return this assertion object.
   * @throws AssertionError if the actual MultipleGenerics<T,U,V,W>'s movies does not contain all given org.assertj.assertions.generator.data.Movie elements.
   */
  public S hasMovies(org.assertj.assertions.generator.data.Movie... movies) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.Movie varargs is not null.
    if (movies == null) failWithMessage("Expecting movies parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.movies, movies);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s movies contains the given org.assertj.assertions.generator.data.Movie elements in Collection.
   * @param movies the given elements that should be contained in actual MultipleGenerics<T,U,V,W>'s movies.
   * @return this assertion object.
   * @throws AssertionError if the actual MultipleGenerics<T,U,V,W>'s movies does not contain all given org.assertj.assertions.generator.data.Movie elements.
   */
  public S hasMovies(java.util.Collection<? extends org.assertj.assertions.generator.data.Movie> movies) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.Movie collection is not null.
    if (movies == null) {
      failWithMessage("Expecting movies parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.movies, movies.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s movies contains <b>only</b> the given org.assertj.assertions.generator.data.Movie elements and nothing else in whatever order.
   * @param movies the given elements that should be contained in actual MultipleGenerics<T,U,V,W>'s movies.
   * @return this assertion object.
   * @throws AssertionError if the actual MultipleGenerics<T,U,V,W>'s movies does not contain all given org.assertj.assertions.generator.data.Movie elements.
   */
  public S hasOnlyMovies(org.assertj.assertions.generator.data.Movie... movies) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.Movie varargs is not null.
    if (movies == null) failWithMessage("Expecting movies parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.movies, movies);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s movies contains <b>only</b> the given org.assertj.assertions.generator.data.Movie elements in Collection and nothing else in whatever order.
   * @param movies the given elements that should be contained in actual MultipleGenerics<T,U,V,W>'s movies.
   * @return this assertion object.
   * @throws AssertionError if the actual MultipleGenerics<T,U,V,W>'s movies does not contain all given org.assertj.assertions.generator.data.Movie elements.
   */
  public S hasOnlyMovies(java.util.Collection<? extends org.assertj.assertions.generator.data.Movie> movies) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.Movie collection is not null.
    if (movies == null) {
      failWithMessage("Expecting movies parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.movies, movies.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s movies does not contain the given org.assertj.assertions.generator.data.Movie elements.
   *
   * @param movies the given elements that should not be in actual MultipleGenerics<T,U,V,W>'s movies.
   * @return this assertion object.
   * @throws AssertionError if the actual MultipleGenerics<T,U,V,W>'s movies contains any given org.assertj.assertions.generator.data.Movie elements.
   */
  public S doesNotHaveMovies(org.assertj.assertions.generator.data.Movie... movies) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.Movie varargs is not null.
    if (movies == null) failWithMessage("Expecting movies parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.movies, movies);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W>'s movies does not contain the given org.assertj.assertions.generator.data.Movie elements in Collection.
   *
   * @param movies the given elements that should not be in actual MultipleGenerics<T,U,V,W>'s movies.
   * @return this assertion object.
   * @throws AssertionError if the actual MultipleGenerics<T,U,V,W>'s movies contains any given org.assertj.assertions.generator.data.Movie elements.
   */
  public S doesNotHaveMovies(java.util.Collection<? extends org.assertj.assertions.generator.data.Movie> movies) {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.Movie collection is not null.
    if (movies == null) {
      failWithMessage("Expecting movies parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.movies, movies.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MultipleGenerics<T,U,V,W> has no movies.
   * @return this assertion object.
   * @throws AssertionError if the actual MultipleGenerics<T,U,V,W>'s movies is not empty.
   */
  public S hasNoMovies() {
    // check that actual MultipleGenerics<T,U,V,W> we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have movies but had :\n  <%s>";

    // check
    if (actual.movies.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.movies);
    }

    // return the current assertion for method chaining
    return myself;
  }


}
