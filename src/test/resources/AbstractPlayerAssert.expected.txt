package org.assertj.assertions.generator.data.nba;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Player} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractPlayerAssert<S extends AbstractPlayerAssert<S, A>, A extends Player> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractPlayerAssert}</code> to make assertions on actual Player.
   * @param actual the Player we want to make assertions on.
   */
  protected AbstractPlayerAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Player's assistsPerGame is equal to the given one.
   * @param assistsPerGame the given assistsPerGame to compare the actual Player's assistsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's assistsPerGame is not equal to the given one.
   */
  public S hasAssistsPerGame(int assistsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting assistsPerGame of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualAssistsPerGame = actual.getAssistsPerGame();
    if (actualAssistsPerGame != assistsPerGame) {
      failWithMessage(assertjErrorMessage, actual, assistsPerGame, actualAssistsPerGame);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player is disabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is not disabled.
   */
  public S isDisabled() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isDisabled()) {
      failWithMessage("\nExpecting that actual Player is disabled but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player is not disabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is disabled.
   */
  public S isNotDisabled() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isDisabled()) {
      failWithMessage("\nExpecting that actual Player is not disabled but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player does not have fun.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player has fun.
   */
  public S doesNotHaveFun() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.doesNotHaveFun()) {
      failWithMessage("\nExpecting that actual Player does not have fun but has.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player has fun.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player does not have fun.
   */
  public S hasFun() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.doesNotHaveFun()) {
      failWithMessage("\nExpecting that actual Player has fun but does not have.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's name is equal to the given one.
   * @param name the given name to compare the actual Player's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's name is not equal to the given one.
   */
  public S hasName(org.assertj.assertions.generator.data.Name name) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.Name actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's name is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's name is not <code>null</code>.
   */
  public S hasNullName() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    org.assertj.assertions.generator.data.Name actualName = actual.getName();
    if (actualName != null) {
      failWithMessage(assertjErrorMessage, actual, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's name is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's name is <code>null</code>.
   */
  public S hasNotNullName() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    org.assertj.assertions.generator.data.Name actualName = actual.getName();
    if (actualName == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player should not play.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player should play.
   */
  public S shouldNotPlay() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.shouldNotPlay()) {
      failWithMessage("\nExpecting that actual Player should not play but should.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player should play.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player should not play.
   */
  public S shouldPlay() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.shouldNotPlay()) {
      failWithMessage("\nExpecting that actual Player should play but should not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's points contains the given int[] elements.
   * @param points the given elements that should be contained in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points does not contain all given int[] elements.
   */
  public S hasPoints(int[]... points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPoints(), points);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's points contains the given int[] elements in Collection.
   * @param points the given elements that should be contained in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points does not contain all given int[] elements.
   */
  public S hasPoints(java.util.Collection<? extends int[]> points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] collection is not null.
    if (points == null) {
      failWithMessage("Expecting points parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPoints(), points.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's points contains <b>only</b> the given int[] elements and nothing else in whatever order.
   * @param points the given elements that should be contained in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points does not contain all given int[] elements.
   */
  public S hasOnlyPoints(int[]... points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPoints(), points);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's points contains <b>only</b> the given int[] elements in Collection and nothing else in whatever order.
   * @param points the given elements that should be contained in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points does not contain all given int[] elements.
   */
  public S hasOnlyPoints(java.util.Collection<? extends int[]> points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] collection is not null.
    if (points == null) {
      failWithMessage("Expecting points parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPoints(), points.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's points does not contain the given int[] elements.
   *
   * @param points the given elements that should not be in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points contains any given int[] elements.
   */
  public S doesNotHavePoints(int[]... points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPoints(), points);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's points does not contain the given int[] elements in Collection.
   *
   * @param points the given elements that should not be in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points contains any given int[] elements.
   */
  public S doesNotHavePoints(java.util.Collection<? extends int[]> points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] collection is not null.
    if (points == null) {
      failWithMessage("Expecting points parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPoints(), points.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player has no points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points is not empty.
   */
  public S hasNoPoints() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have points but had :\n  <%s>";

    // check
    if (actual.getPoints().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPoints());
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's points is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's points is not <code>null</code>.
   */
  public S hasNullPoints() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting points of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    java.util.List actualPoints = actual.getPoints();
    if (actualPoints != null) {
      failWithMessage(assertjErrorMessage, actual, actualPoints);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's points is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's points is <code>null</code>.
   */
  public S hasNotNullPoints() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting points of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    java.util.List actualPoints = actual.getPoints();
    if (actualPoints == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's pointsPerGame is equal to the given one.
   * @param pointsPerGame the given pointsPerGame to compare the actual Player's pointsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's pointsPerGame is not equal to the given one.
   */
  public S hasPointsPerGame(int pointsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting pointsPerGame of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualPointsPerGame = actual.getPointsPerGame();
    if (actualPointsPerGame != pointsPerGame) {
      failWithMessage(assertjErrorMessage, actual, pointsPerGame, actualPointsPerGame);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeamNames contains the given String elements.
   * @param previousTeamNames the given elements that should be contained in actual Player's previousTeamNames.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeamNames does not contain all given String elements.
   */
  public S hasPreviousTeamNames(String... previousTeamNames) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (previousTeamNames == null) failWithMessage("Expecting previousTeamNames parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getPreviousTeamNames()).contains(previousTeamNames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeamNames contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param previousTeamNames the given elements that should be contained in actual Player's previousTeamNames.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeamNames does not contain all given String elements and nothing else.
   */
  public S hasOnlyPreviousTeamNames(String... previousTeamNames) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (previousTeamNames == null) failWithMessage("Expecting previousTeamNames parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getPreviousTeamNames()).containsOnly(previousTeamNames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeamNames does not contain the given String elements.
   *
   * @param previousTeamNames the given elements that should not be in actual Player's previousTeamNames.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeamNames contains any given String elements.
   */
  public S doesNotHavePreviousTeamNames(String... previousTeamNames) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (previousTeamNames == null) failWithMessage("Expecting previousTeamNames parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getPreviousTeamNames()).doesNotContain(previousTeamNames);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player has no previousTeamNames.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeamNames is not empty.
   */
  public S hasNoPreviousTeamNames() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have previousTeamNames but had :\n  <%s>";

    // check that it is not empty
    if (actual.getPreviousTeamNames().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getPreviousTeamNames()));
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeamNames is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's previousTeamNames is not <code>null</code>.
   */
  public S hasNullPreviousTeamNames() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting previousTeamNames of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String[] actualPreviousTeamNames = actual.getPreviousTeamNames();
    if (actualPreviousTeamNames != null) {
      failWithMessage(assertjErrorMessage, actual, actualPreviousTeamNames);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeamNames is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's previousTeamNames is <code>null</code>.
   */
  public S hasNotNullPreviousTeamNames() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting previousTeamNames of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String[] actualPreviousTeamNames = actual.getPreviousTeamNames();
    if (actualPreviousTeamNames == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's reboundsPerGame is equal to the given one.
   * @param reboundsPerGame the given reboundsPerGame to compare the actual Player's reboundsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's reboundsPerGame is not equal to the given one.
   */
  public S hasReboundsPerGame(int reboundsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting reboundsPerGame of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualReboundsPerGame = actual.getReboundsPerGame();
    if (actualReboundsPerGame != reboundsPerGame) {
      failWithMessage(assertjErrorMessage, actual, reboundsPerGame, actualReboundsPerGame);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player is rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is not rookie.
   */
  public S isRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isRookie()) {
      failWithMessage("\nExpecting that actual Player is rookie but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player is not rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is rookie.
   */
  public S isNotRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isRookie()) {
      failWithMessage("\nExpecting that actual Player is not rookie but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player was rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player was not rookie.
   */
  public S wasRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.wasRookie()) {
      failWithMessage("\nExpecting that actual Player was rookie but was not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player was not rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player was rookie.
   */
  public S wasNotRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.wasRookie()) {
      failWithMessage("\nExpecting that actual Player was not rookie but was.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's size is equal to the given one.
   * @param size the given size to compare the actual Player's size to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's size is not equal to the given one.
   */
  public S hasSize(float size) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check value for size
    float actualSize = actual.getSize();
    if (actualSize != size) {
      failWithMessage(assertjErrorMessage, actual, size, actualSize);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's size is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param size the value to compare the actual Player's size to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's size is not close enough to the given value.
   */
  public S hasSizeCloseTo(float size, float assertjOffset) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    float actualSize = actual.getSize();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting size:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualSize, size, assertjOffset, Math.abs(size - actualSize));

    // check
    Assertions.assertThat(actualSize).overridingErrorMessage(assertjErrorMessage).isCloseTo(size, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's team is equal to the given one.
   * @param team the given team to compare the actual Player's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's team is not equal to the given one.
   */
  public S hasTeam(String team) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTeam = actual.getTeam();
    if (!Objects.areEqual(actualTeam, team)) {
      failWithMessage(assertjErrorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's team is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's team is not <code>null</code>.
   */
  public S hasNullTeam() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualTeam = actual.getTeam();
    if (actualTeam != null) {
      failWithMessage(assertjErrorMessage, actual, actualTeam);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's team is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's team is <code>null</code>.
   */
  public S hasNotNullTeam() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualTeam = actual.getTeam();
    if (actualTeam == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates contains the given Player elements.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given Player elements.
   */
  public S hasTeamMates(Player... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates contains the given Player elements in Collection.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given Player elements.
   */
  public S hasTeamMates(java.util.Collection<? extends Player> teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player collection is not null.
    if (teamMates == null) {
      failWithMessage("Expecting teamMates parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTeamMates(), teamMates.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates contains <b>only</b> the given Player elements and nothing else in whatever order.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given Player elements.
   */
  public S hasOnlyTeamMates(Player... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates contains <b>only</b> the given Player elements in Collection and nothing else in whatever order.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given Player elements.
   */
  public S hasOnlyTeamMates(java.util.Collection<? extends Player> teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player collection is not null.
    if (teamMates == null) {
      failWithMessage("Expecting teamMates parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTeamMates(), teamMates.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates does not contain the given Player elements.
   *
   * @param teamMates the given elements that should not be in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates contains any given Player elements.
   */
  public S doesNotHaveTeamMates(Player... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates does not contain the given Player elements in Collection.
   *
   * @param teamMates the given elements that should not be in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates contains any given Player elements.
   */
  public S doesNotHaveTeamMates(java.util.Collection<? extends Player> teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player collection is not null.
    if (teamMates == null) {
      failWithMessage("Expecting teamMates parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTeamMates(), teamMates.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player has no teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates is not empty.
   */
  public S hasNoTeamMates() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have teamMates but had :\n  <%s>";

    // check
    if (actual.getTeamMates().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTeamMates());
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's teamMates is not <code>null</code>.
   */
  public S hasNullTeamMates() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting teamMates of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    java.util.List actualTeamMates = actual.getTeamMates();
    if (actualTeamMates != null) {
      failWithMessage(assertjErrorMessage, actual, actualTeamMates);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's teamMates is <code>null</code>.
   */
  public S hasNotNullTeamMates() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting teamMates of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    java.util.List actualTeamMates = actual.getTeamMates();
    if (actualTeamMates == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player has trophy.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player does not have trophy.
   */
  public S hasTrophy() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.hasTrophy()) {
      failWithMessage("\nExpecting that actual Player has trophy but does not have.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player does not have trophy.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player has trophy.
   */
  public S doesNotHaveTrophy() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.hasTrophy()) {
      failWithMessage("\nExpecting that actual Player does not have trophy but has.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player can win.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player cannot win.
   */
  public S canWin() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.canWin()) {
      failWithMessage("\nExpecting that actual Player can win but cannot.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player cannot win.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player can win.
   */
  public S cannotWin() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.cannotWin()) {
      failWithMessage("\nExpecting that actual Player cannot win but can.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player should win.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player should not win.
   */
  public S shouldWin() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.shouldWin()) {
      failWithMessage("\nExpecting that actual Player should win but should not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player should not win.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player should win.
   */
  public S shouldNotWin() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.shouldWin()) {
      failWithMessage("\nExpecting that actual Player should not win but should.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player will win.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player will not win.
   */
  public S willWin() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.willWin()) {
      failWithMessage("\nExpecting that actual Player will win but will not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player will not win.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player will win.
   */
  public S willNotWin() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.willWin()) {
      failWithMessage("\nExpecting that actual Player will not win but will.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeams contains the given org.assertj.assertions.generator.data.nba.team.Team elements.
   * @param previousTeams the given elements that should be contained in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams does not contain all given org.assertj.assertions.generator.data.nba.team.Team elements.
   */
  public S hasPreviousTeams(org.assertj.assertions.generator.data.nba.team.Team... previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.team.Team varargs is not null.
    if (previousTeams == null) failWithMessage("Expecting previousTeams parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.previousTeams, previousTeams);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeams contains the given org.assertj.assertions.generator.data.nba.team.Team elements in Collection.
   * @param previousTeams the given elements that should be contained in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams does not contain all given org.assertj.assertions.generator.data.nba.team.Team elements.
   */
  public S hasPreviousTeams(java.util.Collection<? extends org.assertj.assertions.generator.data.nba.team.Team> previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.team.Team collection is not null.
    if (previousTeams == null) {
      failWithMessage("Expecting previousTeams parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.previousTeams, previousTeams.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeams contains <b>only</b> the given org.assertj.assertions.generator.data.nba.team.Team elements and nothing else in whatever order.
   * @param previousTeams the given elements that should be contained in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams does not contain all given org.assertj.assertions.generator.data.nba.team.Team elements.
   */
  public S hasOnlyPreviousTeams(org.assertj.assertions.generator.data.nba.team.Team... previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.team.Team varargs is not null.
    if (previousTeams == null) failWithMessage("Expecting previousTeams parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.previousTeams, previousTeams);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeams contains <b>only</b> the given org.assertj.assertions.generator.data.nba.team.Team elements in Collection and nothing else in whatever order.
   * @param previousTeams the given elements that should be contained in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams does not contain all given org.assertj.assertions.generator.data.nba.team.Team elements.
   */
  public S hasOnlyPreviousTeams(java.util.Collection<? extends org.assertj.assertions.generator.data.nba.team.Team> previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.team.Team collection is not null.
    if (previousTeams == null) {
      failWithMessage("Expecting previousTeams parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.previousTeams, previousTeams.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeams does not contain the given org.assertj.assertions.generator.data.nba.team.Team elements.
   *
   * @param previousTeams the given elements that should not be in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams contains any given org.assertj.assertions.generator.data.nba.team.Team elements.
   */
  public S doesNotHavePreviousTeams(org.assertj.assertions.generator.data.nba.team.Team... previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.team.Team varargs is not null.
    if (previousTeams == null) failWithMessage("Expecting previousTeams parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.previousTeams, previousTeams);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeams does not contain the given org.assertj.assertions.generator.data.nba.team.Team elements in Collection.
   *
   * @param previousTeams the given elements that should not be in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams contains any given org.assertj.assertions.generator.data.nba.team.Team elements.
   */
  public S doesNotHavePreviousTeams(java.util.Collection<? extends org.assertj.assertions.generator.data.nba.team.Team> previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.team.Team collection is not null.
    if (previousTeams == null) {
      failWithMessage("Expecting previousTeams parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.previousTeams, previousTeams.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player has no previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams is not empty.
   */
  public S hasNoPreviousTeams() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have previousTeams but had :\n  <%s>";

    // check
    if (actual.previousTeams.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.previousTeams);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeams is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's previousTeams is not <code>null</code>.
   */
  public S hasNullPreviousTeams() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting previousTeams of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    java.util.List actualPreviousTeams = actual.previousTeams;
    if (actualPreviousTeams != null) {
      failWithMessage(assertjErrorMessage, actual, actualPreviousTeams);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's previousTeams is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's previousTeams is <code>null</code>.
   */
  public S hasNotNullPreviousTeams() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting previousTeams of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    java.util.List actualPreviousTeams = actual.previousTeams;
    if (actualPreviousTeams == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
