package org.assertj.assertions.generator.data;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * Abstract base class for {@link WithPrivateFieldsParent} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractWithPrivateFieldsParentAssert<S extends AbstractWithPrivateFieldsParentAssert<S, A>, A extends WithPrivateFieldsParent> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractWithPrivateFieldsParentAssert}</code> to make assertions on actual WithPrivateFieldsParent.
   * @param actual the WithPrivateFieldsParent we want to make assertions on.
   */
  protected AbstractWithPrivateFieldsParentAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual WithPrivateFieldsParent's city is equal to the given one.
   * @param city the given city to compare the actual WithPrivateFieldsParent's city to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFieldsParent's city is not equal to the given one.
   */
  public S hasCity(String city) {
    // check that actual WithPrivateFieldsParent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting city of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCity = actual.getCity();
    if (!Objects.deepEquals(actualCity, city)) {
      failWithMessage(assertjErrorMessage, actual, city, actualCity);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WithPrivateFieldsParent's country is equal to the given one.
   * @param country the given country to compare the actual WithPrivateFieldsParent's country to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFieldsParent's country is not equal to the given one.
   */
  public S hasCountry(String country) {
    // check that actual WithPrivateFieldsParent we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting country of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCountry = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("country", String.class, actual);
    if (!Objects.deepEquals(actualCountry, country)) {
      failWithMessage(assertjErrorMessage, actual, country, actualCountry);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WithPrivateFieldsParent is northernHemisphere.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFieldsParent is not northernHemisphere.
   */
  public S isNorthernHemisphere() {
    // check that actual WithPrivateFieldsParent we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.deepEquals(Boolean.FALSE, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("northernHemisphere", Boolean.class, actual))) {
      failWithMessage("\nExpecting that actual WithPrivateFieldsParent is northernHemisphere but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual WithPrivateFieldsParent is not northernHemisphere.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFieldsParent is northernHemisphere.
   */
  public S isNotNorthernHemisphere() {
    // check that actual WithPrivateFieldsParent we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.deepEquals(Boolean.TRUE, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("northernHemisphere", Boolean.class, actual))) {
      failWithMessage("\nExpecting that actual WithPrivateFieldsParent is not northernHemisphere but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
