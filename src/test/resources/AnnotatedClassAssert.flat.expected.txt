package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * {@link AnnotatedClass} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class AnnotatedClassAssert extends AbstractObjectAssert<AnnotatedClassAssert, AnnotatedClass> {

  /**
   * Creates a new <code>{@link AnnotatedClassAssert}</code> to make assertions on actual AnnotatedClass.
   * @param actual the AnnotatedClass we want to make assertions on.
   */
  public AnnotatedClassAssert(AnnotatedClass actual) {
    super(actual, AnnotatedClassAssert.class);
  }

  /**
   * An entry point for AnnotatedClassAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myAnnotatedClass)</code> and get specific assertion with code completion.
   * @param actual the AnnotatedClass we want to make assertions on.
   * @return a new <code>{@link AnnotatedClassAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static AnnotatedClassAssert assertThat(AnnotatedClass actual) {
    return new AnnotatedClassAssert(actual);
  }

  /**
   * Verifies that the actual AnnotatedClass's anotherProperty is equal to the given one.
   * @param anotherProperty the given anotherProperty to compare the actual AnnotatedClass's anotherProperty to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotatedClass's anotherProperty is not equal to the given one.
   */
  public AnnotatedClassAssert hasAnotherProperty(Object anotherProperty) {
    // check that actual AnnotatedClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting anotherProperty of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Object actualAnotherProperty = actual.anotherProperty();
    if (!Objects.areEqual(actualAnotherProperty, anotherProperty)) {
      failWithMessage(assertjErrorMessage, actual, anotherProperty, actualAnotherProperty);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotatedClass's anotherProperty is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotatedClass's anotherProperty is not <code>null</code>.
   */
  public AnnotatedClassAssert hasNullAnotherProperty() {
    // check that actual AnnotatedClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting anotherProperty of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Object actualAnotherProperty = actual.anotherProperty();
    if (actualAnotherProperty != null) {
      failWithMessage(assertjErrorMessage, actual, actualAnotherProperty);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotatedClass's anotherProperty is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotatedClass's anotherProperty is <code>null</code>.
   */
  public AnnotatedClassAssert hasNotNullAnotherProperty() {
    // check that actual AnnotatedClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting anotherProperty of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Object actualAnotherProperty = actual.anotherProperty();
    if (actualAnotherProperty == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotatedClass's stuff is equal to the given one.
   * @param stuff the given stuff to compare the actual AnnotatedClass's stuff to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotatedClass's stuff is not equal to the given one.
   */
  public AnnotatedClassAssert hasStuff(boolean stuff) {
    // check that actual AnnotatedClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting stuff of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    boolean actualStuff = actual.getStuff();
    if (actualStuff != stuff) {
      failWithMessage(assertjErrorMessage, actual, stuff, actualStuff);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotatedClass's thisIsAProperty is equal to the given one.
   * @param thisIsAProperty the given thisIsAProperty to compare the actual AnnotatedClass's thisIsAProperty to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotatedClass's thisIsAProperty is not equal to the given one.
   */
  public AnnotatedClassAssert hasThisIsAProperty(boolean thisIsAProperty) {
    // check that actual AnnotatedClass we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting thisIsAProperty of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    boolean actualThisIsAProperty = actual.thisIsAProperty();
    if (actualThisIsAProperty != thisIsAProperty) {
      failWithMessage(assertjErrorMessage, actual, thisIsAProperty, actualThisIsAProperty);
    }

    // return the current assertion for method chaining
    return this;
  }

}
