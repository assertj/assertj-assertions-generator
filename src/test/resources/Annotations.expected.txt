package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Annotations} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class AnnotationsAssert extends AbstractAssert<AnnotationsAssert, Annotations> {

  /**
   * Creates a new <code>{@link AnnotationsAssert}</code> to make assertions on actual Annotations.
   * @param actual the Annotations we want to make assertions on.
   */
  public AnnotationsAssert(Annotations actual) {
    super(actual, AnnotationsAssert.class);
  }

  /**
   * An entry point for AnnotationsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myAnnotations)</code> and get specific assertion with code completion.
   * @param actual the Annotations we want to make assertions on.
   * @return a new <code>{@link AnnotationsAssert}</code>
   */
  public static AnnotationsAssert assertThat(Annotations actual) {
    return new AnnotationsAssert(actual);
  }

  /**
   * Verifies that the actual Annotations's anotherProperty is equal to the given one.
   * @param anotherProperty the given anotherProperty to compare the actual Annotations's anotherProperty to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Annotations's anotherProperty is not equal to the given one.
   */
  public AnnotationsAssert hasAnotherProperty(Object anotherProperty) {
    // check that actual Annotations we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting anotherProperty of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualAnotherProperty = actual.anotherProperty();
    if (!Objects.areEqual(actualAnotherProperty, anotherProperty)) {
      failWithMessage(assertjErrorMessage, actual, anotherProperty, actualAnotherProperty);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Annotations's thisIsAProperty is equal to the given one.
   * @param thisIsAProperty the given thisIsAProperty to compare the actual Annotations's thisIsAProperty to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Annotations's thisIsAProperty is not equal to the given one.
   */
  public AnnotationsAssert hasThisIsAProperty(boolean thisIsAProperty) {
    // check that actual Annotations we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting thisIsAProperty of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    boolean actualThisIsAProperty = actual.thisIsAProperty();
    if (actualThisIsAProperty != thisIsAProperty) {
      failWithMessage(assertjErrorMessage, actual, thisIsAProperty, actualThisIsAProperty);
    }

    // return the current assertion for method chaining
    return this;
  }

}
