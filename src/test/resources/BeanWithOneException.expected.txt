package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link BeanWithOneException} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class BeanWithOneExceptionAssert extends AbstractObjectAssert<BeanWithOneExceptionAssert, BeanWithOneException> {

  /**
   * Creates a new <code>{@link BeanWithOneExceptionAssert}</code> to make assertions on actual BeanWithOneException.
   * @param actual the BeanWithOneException we want to make assertions on.
   */
  public BeanWithOneExceptionAssert(BeanWithOneException actual) {
    super(actual, BeanWithOneExceptionAssert.class);
  }

  /**
   * An entry point for BeanWithOneExceptionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myBeanWithOneException)</code> and get specific assertion with code completion.
   * @param actual the BeanWithOneException we want to make assertions on.
   * @return a new <code>{@link BeanWithOneExceptionAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static BeanWithOneExceptionAssert assertThat(BeanWithOneException actual) {
    return new BeanWithOneExceptionAssert(actual);
  }

  /**
   * Verifies that the actual BeanWithOneException's arrayPropertyThrowsException contains the given String elements.
   * @param arrayPropertyThrowsException the given elements that should be contained in actual BeanWithOneException's arrayPropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's arrayPropertyThrowsException does not contain all given String elements.
   * @throws java.io.IOException if actual.getArrayPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasArrayPropertyThrowsException(String... arrayPropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (arrayPropertyThrowsException == null) failWithMessage("Expecting arrayPropertyThrowsException parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getArrayPropertyThrowsException()).contains(arrayPropertyThrowsException);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's arrayPropertyThrowsException contains <b>only</b> the given String elements and nothing else in whatever order.
   *
   * @param arrayPropertyThrowsException the given elements that should be contained in actual BeanWithOneException's arrayPropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's arrayPropertyThrowsException does not contain all given String elements and nothing else.
   * @throws java.io.IOException if actual.getArrayPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasOnlyArrayPropertyThrowsException(String... arrayPropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (arrayPropertyThrowsException == null) failWithMessage("Expecting arrayPropertyThrowsException parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getArrayPropertyThrowsException()).containsOnly(arrayPropertyThrowsException);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's arrayPropertyThrowsException does not contain the given String elements.
   *
   * @param arrayPropertyThrowsException the given elements that should not be in actual BeanWithOneException's arrayPropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's arrayPropertyThrowsException contains any given String elements.
   * @throws java.io.IOException if actual.getArrayPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert doesNotHaveArrayPropertyThrowsException(String... arrayPropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (arrayPropertyThrowsException == null) failWithMessage("Expecting arrayPropertyThrowsException parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getArrayPropertyThrowsException()).doesNotContain(arrayPropertyThrowsException);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException has no arrayPropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's arrayPropertyThrowsException is not empty.
   * @throws java.io.IOException if actual.getArrayPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNoArrayPropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have arrayPropertyThrowsException but had :\n  <%s>";

    // check that it is not empty
    if (actual.getArrayPropertyThrowsException().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getArrayPropertyThrowsException()));
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's arrayPropertyThrowsException is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException's arrayPropertyThrowsException is not <code>null</code>.
   * @throws java.io.IOException if actual.getArrayPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNullArrayPropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting arrayPropertyThrowsException of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String[] actualArrayPropertyThrowsException = actual.getArrayPropertyThrowsException();
    if (actualArrayPropertyThrowsException != null) {
      failWithMessage(assertjErrorMessage, actual, actualArrayPropertyThrowsException);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's arrayPropertyThrowsException is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException's arrayPropertyThrowsException is <code>null</code>.
   * @throws java.io.IOException if actual.getArrayPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNotNullArrayPropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting arrayPropertyThrowsException of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String[] actualArrayPropertyThrowsException = actual.getArrayPropertyThrowsException();
    if (actualArrayPropertyThrowsException == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException is boolean property throws exception.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException is not boolean property throws exception.
   * @throws java.io.IOException if actual.isBooleanPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert isBooleanPropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isBooleanPropertyThrowsException()) {
      failWithMessage("\nExpecting that actual BeanWithOneException is boolean property throws exception but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException is not boolean property throws exception.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException is boolean property throws exception.
   * @throws java.io.IOException if actual.isBooleanPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert isNotBooleanPropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isBooleanPropertyThrowsException()) {
      failWithMessage("\nExpecting that actual BeanWithOneException is not boolean property throws exception but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException contains the given String elements.
   * @param iterablePropertyThrowsException the given elements that should be contained in actual BeanWithOneException's iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException does not contain all given String elements.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasIterablePropertyThrowsException(String... iterablePropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (iterablePropertyThrowsException == null) failWithMessage("Expecting iterablePropertyThrowsException parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getIterablePropertyThrowsException(), iterablePropertyThrowsException);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException contains the given String elements in Collection.
   * @param iterablePropertyThrowsException the given elements that should be contained in actual BeanWithOneException's iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException does not contain all given String elements.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasIterablePropertyThrowsException(java.util.Collection<? extends String> iterablePropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (iterablePropertyThrowsException == null) {
      failWithMessage("Expecting iterablePropertyThrowsException parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getIterablePropertyThrowsException(), iterablePropertyThrowsException.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param iterablePropertyThrowsException the given elements that should be contained in actual BeanWithOneException's iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException does not contain all given String elements.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasOnlyIterablePropertyThrowsException(String... iterablePropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (iterablePropertyThrowsException == null) failWithMessage("Expecting iterablePropertyThrowsException parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getIterablePropertyThrowsException(), iterablePropertyThrowsException);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param iterablePropertyThrowsException the given elements that should be contained in actual BeanWithOneException's iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException does not contain all given String elements.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasOnlyIterablePropertyThrowsException(java.util.Collection<? extends String> iterablePropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (iterablePropertyThrowsException == null) {
      failWithMessage("Expecting iterablePropertyThrowsException parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getIterablePropertyThrowsException(), iterablePropertyThrowsException.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException does not contain the given String elements.
   *
   * @param iterablePropertyThrowsException the given elements that should not be in actual BeanWithOneException's iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException contains any given String elements.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert doesNotHaveIterablePropertyThrowsException(String... iterablePropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (iterablePropertyThrowsException == null) failWithMessage("Expecting iterablePropertyThrowsException parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getIterablePropertyThrowsException(), iterablePropertyThrowsException);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException does not contain the given String elements in Collection.
   *
   * @param iterablePropertyThrowsException the given elements that should not be in actual BeanWithOneException's iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException contains any given String elements.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert doesNotHaveIterablePropertyThrowsException(java.util.Collection<? extends String> iterablePropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (iterablePropertyThrowsException == null) {
      failWithMessage("Expecting iterablePropertyThrowsException parameter not to be null.");
      return this; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getIterablePropertyThrowsException(), iterablePropertyThrowsException.toArray());

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException has no iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException is not empty.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNoIterablePropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have iterablePropertyThrowsException but had :\n  <%s>";

    // check
    if (actual.getIterablePropertyThrowsException().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getIterablePropertyThrowsException());
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException's iterablePropertyThrowsException is not <code>null</code>.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNullIterablePropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting iterablePropertyThrowsException of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    java.util.List actualIterablePropertyThrowsException = actual.getIterablePropertyThrowsException();
    if (actualIterablePropertyThrowsException != null) {
      failWithMessage(assertjErrorMessage, actual, actualIterablePropertyThrowsException);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException's iterablePropertyThrowsException is <code>null</code>.
   * @throws java.io.IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNotNullIterablePropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting iterablePropertyThrowsException of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    java.util.List actualIterablePropertyThrowsException = actual.getIterablePropertyThrowsException();
    if (actualIterablePropertyThrowsException == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's stringPropertyThrowsException is equal to the given one.
   * @param stringPropertyThrowsException the given stringPropertyThrowsException to compare the actual BeanWithOneException's stringPropertyThrowsException to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException's stringPropertyThrowsException is not equal to the given one.
   * @throws java.io.IOException if actual.getStringPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasStringPropertyThrowsException(String stringPropertyThrowsException) throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting stringPropertyThrowsException of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualStringPropertyThrowsException = actual.getStringPropertyThrowsException();
    if (!Objects.areEqual(actualStringPropertyThrowsException, stringPropertyThrowsException)) {
      failWithMessage(assertjErrorMessage, actual, stringPropertyThrowsException, actualStringPropertyThrowsException);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's stringPropertyThrowsException is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException's stringPropertyThrowsException is not <code>null</code>.
   * @throws java.io.IOException if actual.getStringPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNullStringPropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting stringPropertyThrowsException of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualStringPropertyThrowsException = actual.getStringPropertyThrowsException();
    if (actualStringPropertyThrowsException != null) {
      failWithMessage(assertjErrorMessage, actual, actualStringPropertyThrowsException);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's stringPropertyThrowsException is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException's stringPropertyThrowsException is <code>null</code>.
   * @throws java.io.IOException if actual.getStringPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNotNullStringPropertyThrowsException() throws java.io.IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting stringPropertyThrowsException of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualStringPropertyThrowsException = actual.getStringPropertyThrowsException();
    if (actualStringPropertyThrowsException == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

}
