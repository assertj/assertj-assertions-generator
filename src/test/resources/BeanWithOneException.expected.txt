package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;
import java.io.IOException;


/**
 * {@link BeanWithOneException} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BeanWithOneExceptionAssert extends AbstractAssert<BeanWithOneExceptionAssert, BeanWithOneException> {

  /**
   * Creates a new </code>{@link BeanWithOneExceptionAssert}</code> to make assertions on actual BeanWithOneException.
   * @param actual the BeanWithOneException we want to make assertions on.
   */
  public BeanWithOneExceptionAssert(BeanWithOneException actual) {
    super(actual, BeanWithOneExceptionAssert.class);
  }

  /**
   * An entry point for BeanWithOneExceptionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myBeanWithOneException)</code> and get specific assertion with code completion.
   * @param actual the BeanWithOneException we want to make assertions on.
   * @return a new </code>{@link BeanWithOneExceptionAssert}</code>
   */
  public static BeanWithOneExceptionAssert assertThat(BeanWithOneException actual) {
    return new BeanWithOneExceptionAssert(actual);
  }

  /**
   * Verifies that the actual BeanWithOneException's arrayPropertyThrowsException contains the given String elements.
   * @param arrayPropertyThrowsException the given elements that should be contained in actual BeanWithOneException's arrayPropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's arrayPropertyThrowsException does not contain all given String elements.
   * @throws IOException if actual.getArrayPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasArrayPropertyThrowsException(String... arrayPropertyThrowsException) throws IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (arrayPropertyThrowsException == null) throw new AssertionError("Expecting arrayPropertyThrowsException parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getArrayPropertyThrowsException()).contains(arrayPropertyThrowsException);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getArrayPropertyThrowsException().contains(arrayPropertyThrowsException)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getArrayPropertyThrowsException()).overridingErrorMessage("\nmy error message %s", "arg1").contains(arrayPropertyThrowsException);
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException has no arrayPropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's arrayPropertyThrowsException is not empty.
   * @throws IOException if actual.getArrayPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNoArrayPropertyThrowsException() throws IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have arrayPropertyThrowsException but had :\n  <%s>";
    
    // check
    if (actual.getArrayPropertyThrowsException().length > 0)  {
      failWithMessage(errorMessage, actual, java.util.Arrays.toString(actual.getArrayPropertyThrowsException()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual BeanWithOneException is booleanPropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException is not booleanPropertyThrowsException.
   * @throws IOException if actual.isBooleanPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert isBooleanPropertyThrowsException() throws IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isBooleanPropertyThrowsException()) {
      failWithMessage("\nExpected actual BeanWithOneException to be booleanPropertyThrowsException but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException is not booleanPropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException is booleanPropertyThrowsException.
   * @throws IOException if actual.isBooleanPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert isNotBooleanPropertyThrowsException() throws IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isBooleanPropertyThrowsException()) {
      failWithMessage("\nExpected actual BeanWithOneException not to be booleanPropertyThrowsException but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException's iterablePropertyThrowsException contains the given String elements.
   * @param iterablePropertyThrowsException the given elements that should be contained in actual BeanWithOneException's iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException does not contain all given String elements.
   * @throws IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasIterablePropertyThrowsException(String... iterablePropertyThrowsException) throws IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (iterablePropertyThrowsException == null) throw new AssertionError("Expecting iterablePropertyThrowsException parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getIterablePropertyThrowsException()).contains(iterablePropertyThrowsException);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getIterablePropertyThrowsException().contains(iterablePropertyThrowsException)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getIterablePropertyThrowsException()).overridingErrorMessage("\nmy error message %s", "arg1").contains(iterablePropertyThrowsException);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BeanWithOneException has no iterablePropertyThrowsException.
   * @return this assertion object.
   * @throws AssertionError if the actual BeanWithOneException's iterablePropertyThrowsException is not empty.
   * @throws IOException if actual.getIterablePropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasNoIterablePropertyThrowsException() throws IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have iterablePropertyThrowsException but had :\n  <%s>";
    
    // check
    if (!actual.getIterablePropertyThrowsException().isEmpty()) {
      failWithMessage(errorMessage, actual, actual.getIterablePropertyThrowsException());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual BeanWithOneException's stringPropertyThrowsException is equal to the given one.
   * @param stringPropertyThrowsException the given stringPropertyThrowsException to compare the actual BeanWithOneException's stringPropertyThrowsException to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BeanWithOneException's stringPropertyThrowsException is not equal to the given one.
   * @throws IOException if actual.getStringPropertyThrowsException() throws one.
   */
  public BeanWithOneExceptionAssert hasStringPropertyThrowsException(String stringPropertyThrowsException) throws IOException {
    // check that actual BeanWithOneException we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = "\nExpected stringPropertyThrowsException of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";
    
    // check
    String actualStringPropertyThrowsException = actual.getStringPropertyThrowsException();
    if (!actualStringPropertyThrowsException.equals(stringPropertyThrowsException)) {
      failWithMessage(errorMessage, actual, stringPropertyThrowsException, actualStringPropertyThrowsException);
    }

    // return the current assertion for method chaining
    return this;
  }

}
