package org.assertj.assertions.generator.data.cars;

import org.assertj.core.api.AbstractAssert;

/**
 * {@link Car} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CarAssert extends AbstractAssert<CarAssert, Car> {

  /**
   * Creates a new <code>{@link CarAssert}</code> to make assertions on actual Car.
   * @param actual the Car we want to make assertions on.
   */
  public CarAssert(Car actual) {
    super(actual, CarAssert.class);
  }

  /**
   * An entry point for CarAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myCar)</code> and get specific assertion with code completion.
   * @param actual the Car we want to make assertions on.
   * @return a new <code>{@link CarAssert}</code>
   */
  public static CarAssert assertThat(Car actual) {
    return new CarAssert(actual);
  }

  /**
   * Verifies that the actual Car's wheelsCount is equal to the given one.
   * @param wheelsCount the given wheelsCount to compare the actual Car's wheelsCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Car's wheelsCount is not equal to the given one.
   */
  public CarAssert hasWheelsCount(int wheelsCount) {
    // check that actual Car we want to make assertions on is not null.
    isNotNull();

    System.out.println("Hello World");

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting wheelsCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualWheelsCount = actual.getWheelsCount();
    if (actualWheelsCount != wheelsCount) {
      failWithMessage(assertjErrorMessage, actual, wheelsCount, actualWheelsCount);
    }

    // return the current assertion for method chaining
    return this;
  }

}
