package org.assertj.assertions.generator;

/**
 * {@link ClassUsingDifferentClassesWithSameName} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractClassUsingDifferentClassesWithSameNameAssert} instead.
 */
@javax.annotation.processing.Generated(value="assertj-assertions-generator")
public class ClassUsingDifferentClassesWithSameNameAssert extends AbstractClassUsingDifferentClassesWithSameNameAssert<ClassUsingDifferentClassesWithSameNameAssert, ClassUsingDifferentClassesWithSameName> {

  /**
   * Creates a new <code>{@link ClassUsingDifferentClassesWithSameNameAssert}</code> to make assertions on actual ClassUsingDifferentClassesWithSameName.
   * @param actual the ClassUsingDifferentClassesWithSameName we want to make assertions on.
   */
  public ClassUsingDifferentClassesWithSameNameAssert(ClassUsingDifferentClassesWithSameName actual) {
    super(actual, ClassUsingDifferentClassesWithSameNameAssert.class);
  }

  /**
   * An entry point for ClassUsingDifferentClassesWithSameNameAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myClassUsingDifferentClassesWithSameName)</code> and get specific assertion with code completion.
   * @param actual the ClassUsingDifferentClassesWithSameName we want to make assertions on.
   * @return a new <code>{@link ClassUsingDifferentClassesWithSameNameAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ClassUsingDifferentClassesWithSameNameAssert assertThat(ClassUsingDifferentClassesWithSameName actual) {
    return new ClassUsingDifferentClassesWithSameNameAssert(actual);
  }
}
