package org.assertj.assertions.generator;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link ClassUsingDifferentClassesWithSameName} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ClassUsingDifferentClassesWithSameNameAssert extends AbstractObjectAssert<ClassUsingDifferentClassesWithSameNameAssert, ClassUsingDifferentClassesWithSameName> {

  /**
   * Creates a new <code>{@link ClassUsingDifferentClassesWithSameNameAssert}</code> to make assertions on actual ClassUsingDifferentClassesWithSameName.
   * @param actual the ClassUsingDifferentClassesWithSameName we want to make assertions on.
   */
  public ClassUsingDifferentClassesWithSameNameAssert(ClassUsingDifferentClassesWithSameName actual) {
    super(actual, ClassUsingDifferentClassesWithSameNameAssert.class);
  }

  /**
   * An entry point for ClassUsingDifferentClassesWithSameNameAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myClassUsingDifferentClassesWithSameName)</code> and get specific assertion with code completion.
   * @param actual the ClassUsingDifferentClassesWithSameName we want to make assertions on.
   * @return a new <code>{@link ClassUsingDifferentClassesWithSameNameAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ClassUsingDifferentClassesWithSameNameAssert assertThat(ClassUsingDifferentClassesWithSameName actual) {
    return new ClassUsingDifferentClassesWithSameNameAssert(actual);
  }

  /**
   * Verifies that the actual ClassUsingDifferentClassesWithSameName's nbaTeam is equal to the given one.
   * @param nbaTeam the given nbaTeam to compare the actual ClassUsingDifferentClassesWithSameName's nbaTeam to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ClassUsingDifferentClassesWithSameName's nbaTeam is not equal to the given one.
   */
  public ClassUsingDifferentClassesWithSameNameAssert hasNbaTeam(org.assertj.assertions.generator.data.nba.team.Team nbaTeam) {
    // check that actual ClassUsingDifferentClassesWithSameName we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nbaTeam of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.nba.team.Team actualNbaTeam = actual.getNbaTeam();
    if (!Objects.deepEquals(actualNbaTeam, nbaTeam)) {
      failWithMessage(assertjErrorMessage, actual, nbaTeam, actualNbaTeam);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ClassUsingDifferentClassesWithSameName's team is equal to the given one.
   * @param team the given team to compare the actual ClassUsingDifferentClassesWithSameName's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ClassUsingDifferentClassesWithSameName's team is not equal to the given one.
   */
  public ClassUsingDifferentClassesWithSameNameAssert hasTeam(org.assertj.assertions.generator.data.Team team) {
    // check that actual ClassUsingDifferentClassesWithSameName we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.assertj.assertions.generator.data.Team actualTeam = actual.getTeam();
    if (!Objects.deepEquals(actualTeam, team)) {
      failWithMessage(assertjErrorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return this;
  }

}
