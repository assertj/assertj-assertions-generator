package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * {@link FieldPropertyClash} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class FieldPropertyClashAssert extends AbstractObjectAssert<FieldPropertyClashAssert, FieldPropertyClash> {

  /**
   * Creates a new <code>{@link FieldPropertyClashAssert}</code> to make assertions on actual FieldPropertyClash.
   * @param actual the FieldPropertyClash we want to make assertions on.
   */
  public FieldPropertyClashAssert(FieldPropertyClash actual) {
    super(actual, FieldPropertyClashAssert.class);
  }

  /**
   * An entry point for FieldPropertyClashAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myFieldPropertyClash)</code> and get specific assertion with code completion.
   * @param actual the FieldPropertyClash we want to make assertions on.
   * @return a new <code>{@link FieldPropertyClashAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static FieldPropertyClashAssert assertThat(FieldPropertyClash actual) {
    return new FieldPropertyClashAssert(actual);
  }

  /**
   * Verifies that the actual FieldPropertyClash is boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash is not boolean.
   */
  public FieldPropertyClashAssert isBoolean() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isBoolean()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash is boolean but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FieldPropertyClash is not boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash is boolean.
   */
  public FieldPropertyClashAssert isNotBoolean() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isNotBoolean()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash is not boolean but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FieldPropertyClash will not be outside.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash will be outside.
   */
  public FieldPropertyClashAssert willNotBeOutside() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.willNotBeOutside()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash will not be outside but will be.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FieldPropertyClash will be outside.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash will not be outside.
   */
  public FieldPropertyClashAssert willBeOutside() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.willNotBeOutside()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash will be outside but will not be.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FieldPropertyClash should not be somewhere.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash should be somewhere.
   */
  public FieldPropertyClashAssert shouldNotBeSomewhere() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.shouldNotBeSomewhere()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash should not be somewhere but should be.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FieldPropertyClash should be somewhere.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash should not be somewhere.
   */
  public FieldPropertyClashAssert shouldBeSomewhere() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.shouldNotBeSomewhere()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash should be somewhere but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FieldPropertyClash's string is equal to the given one.
   * @param string the given string to compare the actual FieldPropertyClash's string to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash's string is not equal to the given one.
   */
  public FieldPropertyClashAssert hasString(String string) {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting string of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualString = actual.getString();
    if (!Objects.areEqual(actualString, string)) {
      failWithMessage(assertjErrorMessage, actual, string, actualString);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FieldPropertyClash will be upside down.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash will not be upside down.
   */
  public FieldPropertyClashAssert willBeUpsideDown() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.willBeUpsideDown()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash will be upside down but will not be.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FieldPropertyClash will not be upside down.
   * @return this assertion object.
   * @throws AssertionError - if the actual FieldPropertyClash will be upside down.
   */
  public FieldPropertyClashAssert willNotBeUpsideDown() {
    // check that actual FieldPropertyClash we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.willBeUpsideDown()) {
      failWithMessage("\nExpecting that actual FieldPropertyClash will not be upside down but will be.");
    }

    // return the current assertion for method chaining
    return this;
  }






}
