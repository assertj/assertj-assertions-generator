package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link InterferencePrimitives} specific assertions - Generated by CustomAssertionGenerator.
 */
public class InterferencePrimitivesAssert extends AbstractAssert<InterferencePrimitivesAssert, InterferencePrimitives> {

  /**
   * Creates a new <code>{@link InterferencePrimitivesAssert}</code> to make assertions on actual InterferencePrimitives.
   * @param actual the InterferencePrimitives we want to make assertions on.
   */
  public InterferencePrimitivesAssert(InterferencePrimitives actual) {
    super(actual, InterferencePrimitivesAssert.class);
  }

  /**
   * An entry point for InterferencePrimitivesAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myInterferencePrimitives)</code> and get specific assertion with code completion.
   * @param actual the InterferencePrimitives we want to make assertions on.
   * @return a new <code>{@link InterferencePrimitivesAssert}</code>
   */
  public static InterferencePrimitivesAssert assertThat(InterferencePrimitives actual) {
    return new InterferencePrimitivesAssert(actual);
  }

  /**
   * Verifies that the actual InterferencePrimitives is a boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual InterferencePrimitives is not a boolean.
   */
  public InterferencePrimitivesAssert isABoolean() {
    // check that actual InterferencePrimitives we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.FALSE, actual.isABoolean())) {
      failWithMessage("\nExpecting that actual InterferencePrimitives is a boolean but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InterferencePrimitives is not a boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual InterferencePrimitives is a boolean.
   */
  public InterferencePrimitivesAssert isNotABoolean() {
    // check that actual InterferencePrimitives we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.FALSE, actual.isNotABoolean())) {
      failWithMessage("\nExpecting that actual InterferencePrimitives is not a boolean but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InterferencePrimitives is not working.
   * @return this assertion object.
   * @throws AssertionError - if the actual InterferencePrimitives is working.
   */
  public InterferencePrimitivesAssert isNotWorking() {
    // check that actual InterferencePrimitives we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isNotWorking()) {
      failWithMessage("\nExpecting that actual InterferencePrimitives is not working but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual InterferencePrimitives is working.
   * @return this assertion object.
   * @throws AssertionError - if the actual InterferencePrimitives is not working.
   */
  public InterferencePrimitivesAssert isWorking() {
    // check that actual InterferencePrimitives we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isWorking()) {
      failWithMessage("\nExpecting that actual InterferencePrimitives is working but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

}
