package org.assertj.assertions.generator.data;

import org.assertj.assertions.generator.data.ArtWork;
import org.assertj.assertions.generator.data.ArtWorkAssert;
import org.assertj.assertions.generator.data.Movie;
import org.assertj.assertions.generator.data.MovieAssert;
import org.assertj.assertions.generator.data.MoviePublicCategoryAssert;
import org.assertj.assertions.generator.data.Name;
import org.assertj.assertions.generator.data.NameAssert;
import org.assertj.assertions.generator.data.TreeEnum;
import org.assertj.assertions.generator.data.TreeEnumAssert;
import org.assertj.assertions.generator.data.lotr.Race;
import org.assertj.assertions.generator.data.lotr.RaceAssert;
import org.assertj.assertions.generator.data.lotr.Ring;
import org.assertj.assertions.generator.data.lotr.RingAssert;
import org.assertj.assertions.generator.data.lotr.TolkienCharacter;
import org.assertj.assertions.generator.data.lotr.TolkienCharacterAssert;
import org.assertj.assertions.generator.data.nba.Player;
import org.assertj.assertions.generator.data.nba.PlayerAssert;

/**
 * Like {@link SoftAssertions} but as a junit rule that takes care of calling
 * {@link SoftAssertions#assertAll() assertAll()} at the end of each test.
 * <p>
 * Example:
 * <pre><code class='java'> public class SoftlyTest {
 *
 *     &#064;Rule
 *     public final JUnitBDDSoftAssertions softly = new JUnitBDDSoftAssertions();
 *
 *     &#064;Test
 *     public void soft_bdd_assertions() throws Exception {
 *       softly.assertThat(1).isEqualTo(2);
 *       softly.assertThat(Lists.newArrayList(1, 2)).containsOnly(1, 2);
 *       // no need to call assertAll(), this is done automatically.
 *     }
 *  }</code></pre>
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class JUnitSoftAssertions extends org.assertj.core.api.JUnitSoftAssertions {

  /**
   * Creates a new "soft" instance of <code>{@link ArtWorkAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public ArtWorkAssert assertThat(ArtWork actual) {
    return proxy(ArtWorkAssert.class, ArtWork.class, actual);
  }

  /**
   * Creates a new "soft" instance of <code>{@link MovieAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public MovieAssert assertThat(Movie actual) {
    return proxy(MovieAssert.class, Movie.class, actual);
  }

  /**
   * Creates a new "soft" instance of <code>{@link MoviePublicCategoryAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public MoviePublicCategoryAssert assertThat(Movie.PublicCategory actual) {
    return proxy(MoviePublicCategoryAssert.class, Movie.PublicCategory.class, actual);
  }

  /**
   * Creates a new "soft" instance of <code>{@link NameAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public NameAssert assertThat(Name actual) {
    return proxy(NameAssert.class, Name.class, actual);
  }

  /**
   * Creates a new "soft" instance of <code>{@link TreeEnumAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public TreeEnumAssert assertThat(TreeEnum actual) {
    return proxy(TreeEnumAssert.class, TreeEnum.class, actual);
  }

  /**
   * Creates a new "soft" instance of <code>{@link RaceAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public RaceAssert assertThat(Race actual) {
    return proxy(RaceAssert.class, Race.class, actual);
  }

  /**
   * Creates a new "soft" instance of <code>{@link RingAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public RingAssert assertThat(Ring actual) {
    return proxy(RingAssert.class, Ring.class, actual);
  }

  /**
   * Creates a new "soft" instance of <code>{@link TolkienCharacterAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public TolkienCharacterAssert assertThat(TolkienCharacter actual) {
    return proxy(TolkienCharacterAssert.class, TolkienCharacter.class, actual);
  }

  /**
   * Creates a new "soft" instance of <code>{@link PlayerAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created "soft" assertion object.
   */
  @org.assertj.core.util.CheckReturnValue
  public PlayerAssert assertThat(Player actual) {
    return proxy(PlayerAssert.class, Player.class, actual);
  }

}
