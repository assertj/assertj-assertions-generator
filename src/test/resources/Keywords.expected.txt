package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Keywords} specific assertions - Generated by CustomAssertionGenerator.
 */
public class KeywordsAssert extends AbstractAssert<KeywordsAssert, Keywords> {

  /**
   * Creates a new <code>{@link KeywordsAssert}</code> to make assertions on actual Keywords.
   * @param actual the Keywords we want to make assertions on.
   */
  public KeywordsAssert(Keywords actual) {
    super(actual, KeywordsAssert.class);
  }

  /**
   * An entry point for KeywordsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myKeywords)</code> and get specific assertion with code completion.
   * @param actual the Keywords we want to make assertions on.
   * @return a new <code>{@link KeywordsAssert}</code>
   */
  public static KeywordsAssert assertThat(Keywords actual) {
    return new KeywordsAssert(actual);
  }

  /**
   * Verifies that the actual Keywords's abstract is equal to the given one.
   * @param expectedAbstract the given abstract to compare the actual Keywords's abstract to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's abstract is not equal to the given one.
   * @throws java.io.IOException if actual.getAbstract() throws one.
   */
  public KeywordsAssert hasAbstract(String expectedAbstract) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting abstract of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAbstract = actual.getAbstract();
    if (!Objects.areEqual(actualAbstract, expectedAbstract)) {
      failWithMessage(assertjErrorMessage, actual, expectedAbstract, actualAbstract);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's assert is equal to the given one.
   * @param expectedAssert the given assert to compare the actual Keywords's assert to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's assert is not equal to the given one.
   */
  public KeywordsAssert hasAssert(Object expectedAssert) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting assert of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualAssert = actual.getAssert();
    if (!Objects.areEqual(actualAssert, expectedAssert)) {
      failWithMessage(assertjErrorMessage, actual, expectedAssert, actualAssert);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's boolean is equal to the given one.
   * @param expectedBoolean the given boolean to compare the actual Keywords's boolean to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's boolean is not equal to the given one.
   */
  public KeywordsAssert hasBoolean(Boolean expectedBoolean) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting boolean of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Boolean actualBoolean = actual.getBoolean();
    if (!Objects.areEqual(actualBoolean, expectedBoolean)) {
      failWithMessage(assertjErrorMessage, actual, expectedBoolean, actualBoolean);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's break contains the given Object elements.
   * @param expectedBreak the given elements that should be contained in actual Keywords's break.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's break does not contain all given Object elements.
   */
  public KeywordsAssert hasBreak(Object... expectedBreak) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (expectedBreak == null) failWithMessage("Expecting break parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getBreak(), expectedBreak);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's break contains <b>only<b> the given Object elements and nothing else in whatever order.
   * @param expectedBreak the given elements that should be contained in actual Keywords's break.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's break does not contain all given Object elements.
   */
  public KeywordsAssert hasOnlyBreak(Object... expectedBreak) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (expectedBreak == null) failWithMessage("Expecting break parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getBreak(), expectedBreak);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's break does not contain the given Object elements.
   *
   * @param expectedBreak the given elements that should not be in actual Keywords's break.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's break contains any given Object elements.
   */
  public KeywordsAssert doesNotHaveBreak(Object... expectedBreak) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (expectedBreak == null) failWithMessage("Expecting break parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getBreak(), expectedBreak);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords has no break.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's break is not empty.
   */
  public KeywordsAssert hasNoBreak() {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have break but had :\n  <%s>";
    
    // check
    if (actual.getBreak().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getBreak());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
     * Verifies that the actual Keywords's byte is equal to the given one.
     * @param expectedByte the given byte to compare the actual Keywords's byte to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Keywords's byte is not equal to the given one.
     */
    public KeywordsAssert hasByte(Byte expectedByte) {
      // check that actual Keywords we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting byte of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      Byte actualByte = actual.getByte();
      if (actualByte != expectedByte) {
        failWithMessage(assertjErrorMessage, actual, expectedByte, actualByte);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Keywords's byte is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param expectedByte the value to compare the actual Keywords's byte to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's byte is not close enough to the given value.
   */
  public KeywordsAssert hasCloseToByte(Byte expectedByte, Byte offset) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    Byte actualByte = actual.getByte();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting byte:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualByte, expectedByte, offset, Math.abs(expectedByte - actualByte));
    
    // check
    Assertions.assertThat(actualByte).overridingErrorMessage(assertjErrorMessage).isCloseTo(expectedByte, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's case contains the given Object elements.
   * @param expectedCase the given elements that should be contained in actual Keywords's case.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's case does not contain all given Object elements.
   */
  public KeywordsAssert hasCase(Object... expectedCase) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (expectedCase == null) failWithMessage("Expecting case parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getCase()).contains(expectedCase);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's case contains <b>only<b> the given Object elements and nothing else in whatever order.
   * 
   * @param expectedCase the given elements that should be contained in actual Keywords's case.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's case does not contain all given Object elements and nothing else.
   */
  public KeywordsAssert hasOnlyCase(Object... expectedCase) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (expectedCase == null) failWithMessage("Expecting case parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getCase()).containsOnly(expectedCase);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's case does not contain the given Object elements.
   *
   * @param expectedCase the given elements that should not be in actual Keywords's case.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's case contains any given Object elements.
   */
  public KeywordsAssert doesNotHaveCase(Object... expectedCase) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (expectedCase == null) failWithMessage("Expecting case parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getCase()).doesNotContain(expectedCase);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords has no case.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's case is not empty.
   */
  public KeywordsAssert hasNoCase() {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have case but had :\n  <%s>";
    
    // check
    if (actual.getCase().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getCase()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Keywords's catch is equal to the given one.
   * @param expectedCatch the given catch to compare the actual Keywords's catch to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's catch is not equal to the given one.
   */
  public KeywordsAssert hasCatch(Object expectedCatch) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting catch of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualCatch = actual.getCatch();
    if (!Objects.areEqual(actualCatch, expectedCatch)) {
      failWithMessage(assertjErrorMessage, actual, expectedCatch, actualCatch);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's char is equal to the given one.
   * @param expectedChar the given char to compare the actual Keywords's char to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's char is not equal to the given one.
   */
  public KeywordsAssert hasChar(char expectedChar) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting char of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    char actualChar = actual.getChar();
    if (actualChar != expectedChar) {
      failWithMessage(assertjErrorMessage, actual, expectedChar, actualChar);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's const is equal to the given one.
   * @param expectedConst the given const to compare the actual Keywords's const to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's const is not equal to the given one.
   */
  public KeywordsAssert hasConst(Class expectedConst) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting const of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Class actualConst = actual.getConst();
    if (!Objects.areEqual(actualConst, expectedConst)) {
      failWithMessage(assertjErrorMessage, actual, expectedConst, actualConst);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's continue is equal to the given one.
   * @param expectedContinue the given continue to compare the actual Keywords's continue to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's continue is not equal to the given one.
   */
  public KeywordsAssert hasContinue(String expectedContinue) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting continue of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualContinue = actual.getContinue();
    if (!Objects.areEqual(actualContinue, expectedContinue)) {
      failWithMessage(assertjErrorMessage, actual, expectedContinue, actualContinue);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's default contains the given String elements.
   * @param expectedDefault the given elements that should be contained in actual Keywords's default.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's default does not contain all given String elements.
   * @throws java.io.IOException if actual.getDefault() throws one.
   */
  public KeywordsAssert hasDefault(String... expectedDefault) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (expectedDefault == null) failWithMessage("Expecting default parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getDefault(), expectedDefault);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's default contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param expectedDefault the given elements that should be contained in actual Keywords's default.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's default does not contain all given String elements.
   * @throws java.io.IOException if actual.getDefault() throws one.
   */
  public KeywordsAssert hasOnlyDefault(String... expectedDefault) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (expectedDefault == null) failWithMessage("Expecting default parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getDefault(), expectedDefault);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's default does not contain the given String elements.
   *
   * @param expectedDefault the given elements that should not be in actual Keywords's default.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's default contains any given String elements.
   * @throws java.io.IOException if actual.getDefault() throws one.
   */
  public KeywordsAssert doesNotHaveDefault(String... expectedDefault) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (expectedDefault == null) failWithMessage("Expecting default parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getDefault(), expectedDefault);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords has no default.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's default is not empty.
   * @throws java.io.IOException if actual.getDefault() throws one.
   */
  public KeywordsAssert hasNoDefault() throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have default but had :\n  <%s>";
    
    // check
    if (actual.getDefault().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getDefault());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Keywords's do is equal to the given one.
   * @param expectedDo the given do to compare the actual Keywords's do to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's do is not equal to the given one.
   */
  public KeywordsAssert hasDo(Object expectedDo) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting do of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualDo = actual.getDo();
    if (!Objects.areEqual(actualDo, expectedDo)) {
      failWithMessage(assertjErrorMessage, actual, expectedDo, actualDo);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
     * Verifies that the actual Keywords's double is equal to the given one.
     * @param expectedDouble the given double to compare the actual Keywords's double to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Keywords's double is not equal to the given one.
     */
    public KeywordsAssert hasDouble(double expectedDouble) {
      // check that actual Keywords we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting double of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      double actualDouble = actual.getDouble();
      if (actualDouble != expectedDouble) {
        failWithMessage(assertjErrorMessage, actual, expectedDouble, actualDouble);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Keywords's double is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param expectedDouble the value to compare the actual Keywords's double to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's double is not close enough to the given value.
   */
  public KeywordsAssert hasCloseToDouble(double expectedDouble, double offset) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    double actualDouble = actual.getDouble();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting double:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualDouble, expectedDouble, offset, Math.abs(expectedDouble - actualDouble));
    
    // check
    Assertions.assertThat(actualDouble).overridingErrorMessage(assertjErrorMessage).isCloseTo(expectedDouble, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's else is equal to the given one.
   * @param expectedElse the given else to compare the actual Keywords's else to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's else is not equal to the given one.
   */
  public KeywordsAssert hasElse(Object expectedElse) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting else of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualElse = actual.getElse();
    if (!Objects.areEqual(actualElse, expectedElse)) {
      failWithMessage(assertjErrorMessage, actual, expectedElse, actualElse);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's enum is equal to the given one.
   * @param expectedEnum the given enum to compare the actual Keywords's enum to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's enum is not equal to the given one.
   */
  public KeywordsAssert hasEnum(Object expectedEnum) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting enum of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualEnum = actual.getEnum();
    if (!Objects.areEqual(actualEnum, expectedEnum)) {
      failWithMessage(assertjErrorMessage, actual, expectedEnum, actualEnum);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's extends is equal to the given one.
   * @param expectedExtends the given extends to compare the actual Keywords's extends to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's extends is not equal to the given one.
   */
  public KeywordsAssert hasExtends(Object expectedExtends) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting extends of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualExtends = actual.getExtends();
    if (!Objects.areEqual(actualExtends, expectedExtends)) {
      failWithMessage(assertjErrorMessage, actual, expectedExtends, actualExtends);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's false is equal to the given one.
   * @param expectedFalse the given false to compare the actual Keywords's false to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's false is not equal to the given one.
   */
  public KeywordsAssert hasFalse(Object expectedFalse) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting false of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualFalse = actual.getFalse();
    if (!Objects.areEqual(actualFalse, expectedFalse)) {
      failWithMessage(assertjErrorMessage, actual, expectedFalse, actualFalse);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's final is equal to the given one.
   * @param expectedFinal the given final to compare the actual Keywords's final to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's final is not equal to the given one.
   */
  public KeywordsAssert hasFinal(Object expectedFinal) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting final of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualFinal = actual.getFinal();
    if (!Objects.areEqual(actualFinal, expectedFinal)) {
      failWithMessage(assertjErrorMessage, actual, expectedFinal, actualFinal);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's finally is equal to the given one.
   * @param expectedFinally the given finally to compare the actual Keywords's finally to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's finally is not equal to the given one.
   */
  public KeywordsAssert hasFinally(Object expectedFinally) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting finally of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualFinally = actual.getFinally();
    if (!Objects.areEqual(actualFinally, expectedFinally)) {
      failWithMessage(assertjErrorMessage, actual, expectedFinally, actualFinally);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
     * Verifies that the actual Keywords's float is equal to the given one.
     * @param expectedFloat the given float to compare the actual Keywords's float to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Keywords's float is not equal to the given one.
     */
    public KeywordsAssert hasFloat(float expectedFloat) {
      // check that actual Keywords we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting float of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      float actualFloat = actual.getFloat();
      if (actualFloat != expectedFloat) {
        failWithMessage(assertjErrorMessage, actual, expectedFloat, actualFloat);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Keywords's float is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param expectedFloat the value to compare the actual Keywords's float to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's float is not close enough to the given value.
   */
  public KeywordsAssert hasCloseToFloat(float expectedFloat, float offset) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    float actualFloat = actual.getFloat();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting float:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualFloat, expectedFloat, offset, Math.abs(expectedFloat - actualFloat));
    
    // check
    Assertions.assertThat(actualFloat).overridingErrorMessage(assertjErrorMessage).isCloseTo(expectedFloat, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's for is equal to the given one.
   * @param expectedFor the given for to compare the actual Keywords's for to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's for is not equal to the given one.
   * @throws java.io.IOException if actual.getFor() throws one.
   */
  public KeywordsAssert hasFor(Object expectedFor) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting for of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualFor = actual.getFor();
    if (!Objects.areEqual(actualFor, expectedFor)) {
      failWithMessage(assertjErrorMessage, actual, expectedFor, actualFor);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's goto is equal to the given one.
   * @param expectedGoto the given goto to compare the actual Keywords's goto to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's goto is not equal to the given one.
   */
  public KeywordsAssert hasGoto(Object expectedGoto) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting goto of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualGoto = actual.getGoto();
    if (!Objects.areEqual(actualGoto, expectedGoto)) {
      failWithMessage(assertjErrorMessage, actual, expectedGoto, actualGoto);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's if is equal to the given one.
   * @param expectedIf the given if to compare the actual Keywords's if to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's if is not equal to the given one.
   */
  public KeywordsAssert hasIf(Object expectedIf) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting if of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualIf = actual.getIf();
    if (!Objects.areEqual(actualIf, expectedIf)) {
      failWithMessage(assertjErrorMessage, actual, expectedIf, actualIf);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's implements is equal to the given one.
   * @param expectedImplements the given implements to compare the actual Keywords's implements to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's implements is not equal to the given one.
   */
  public KeywordsAssert hasImplements(Object expectedImplements) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting implements of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualImplements = actual.getImplements();
    if (!Objects.areEqual(actualImplements, expectedImplements)) {
      failWithMessage(assertjErrorMessage, actual, expectedImplements, actualImplements);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's import is equal to the given one.
   * @param expectedImport the given import to compare the actual Keywords's import to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's import is not equal to the given one.
   */
  public KeywordsAssert hasImport(Object expectedImport) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting import of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualImport = actual.getImport();
    if (!Objects.areEqual(actualImport, expectedImport)) {
      failWithMessage(assertjErrorMessage, actual, expectedImport, actualImport);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's instanceof is equal to the given one.
   * @param expectedInstanceof the given instanceof to compare the actual Keywords's instanceof to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's instanceof is not equal to the given one.
   */
  public KeywordsAssert hasInstanceof(Object expectedInstanceof) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instanceof of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualInstanceof = actual.getInstanceof();
    if (!Objects.areEqual(actualInstanceof, expectedInstanceof)) {
      failWithMessage(assertjErrorMessage, actual, expectedInstanceof, actualInstanceof);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
     * Verifies that the actual Keywords's int is equal to the given one.
     * @param expectedInt the given int to compare the actual Keywords's int to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Keywords's int is not equal to the given one.
   * @throws java.io.IOException if actual.getInt() throws one.
     */
    public KeywordsAssert hasInt(int expectedInt) throws java.io.IOException {
      // check that actual Keywords we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting int of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      int actualInt = actual.getInt();
      if (actualInt != expectedInt) {
        failWithMessage(assertjErrorMessage, actual, expectedInt, actualInt);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Keywords's int is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param expectedInt the value to compare the actual Keywords's int to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's int is not close enough to the given value.
   * @throws java.io.IOException if actual.getInt() throws one.
   */
  public KeywordsAssert hasCloseToInt(int expectedInt, int offset) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    int actualInt = actual.getInt();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting int:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualInt, expectedInt, offset, Math.abs(expectedInt - actualInt));
    
    // check
    Assertions.assertThat(actualInt).overridingErrorMessage(assertjErrorMessage).isCloseTo(expectedInt, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's interface is equal to the given one.
   * @param expectedInterface the given interface to compare the actual Keywords's interface to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's interface is not equal to the given one.
   */
  public KeywordsAssert hasInterface(Object expectedInterface) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting interface of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualInterface = actual.getInterface();
    if (!Objects.areEqual(actualInterface, expectedInterface)) {
      failWithMessage(assertjErrorMessage, actual, expectedInterface, actualInterface);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
     * Verifies that the actual Keywords's long is equal to the given one.
     * @param expectedLong the given long to compare the actual Keywords's long to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Keywords's long is not equal to the given one.
     */
    public KeywordsAssert hasLong(long expectedLong) {
      // check that actual Keywords we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting long of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      long actualLong = actual.getLong();
      if (actualLong != expectedLong) {
        failWithMessage(assertjErrorMessage, actual, expectedLong, actualLong);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Keywords's long is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param expectedLong the value to compare the actual Keywords's long to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's long is not close enough to the given value.
   */
  public KeywordsAssert hasCloseToLong(long expectedLong, long offset) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    long actualLong = actual.getLong();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting long:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualLong, expectedLong, offset, Math.abs(expectedLong - actualLong));
    
    // check
    Assertions.assertThat(actualLong).overridingErrorMessage(assertjErrorMessage).isCloseTo(expectedLong, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's native is equal to the given one.
   * @param expectedNative the given native to compare the actual Keywords's native to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's native is not equal to the given one.
   */
  public KeywordsAssert hasNative(Object expectedNative) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting native of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualNative = actual.getNative();
    if (!Objects.areEqual(actualNative, expectedNative)) {
      failWithMessage(assertjErrorMessage, actual, expectedNative, actualNative);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's new is equal to the given one.
   * @param expectedNew the given new to compare the actual Keywords's new to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's new is not equal to the given one.
   */
  public KeywordsAssert hasNew(Object expectedNew) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting new of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualNew = actual.getNew();
    if (!Objects.areEqual(actualNew, expectedNew)) {
      failWithMessage(assertjErrorMessage, actual, expectedNew, actualNew);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's null is equal to the given one.
   * @param expectedNull the given null to compare the actual Keywords's null to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's null is not equal to the given one.
   */
  public KeywordsAssert hasNull(Object expectedNull) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting null of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualNull = actual.getNull();
    if (!Objects.areEqual(actualNull, expectedNull)) {
      failWithMessage(assertjErrorMessage, actual, expectedNull, actualNull);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's package is equal to the given one.
   * @param expectedPackage the given package to compare the actual Keywords's package to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's package is not equal to the given one.
   */
  public KeywordsAssert hasPackage(Object expectedPackage) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting package of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualPackage = actual.getPackage();
    if (!Objects.areEqual(actualPackage, expectedPackage)) {
      failWithMessage(assertjErrorMessage, actual, expectedPackage, actualPackage);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's private is equal to the given one.
   * @param expectedPrivate the given private to compare the actual Keywords's private to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's private is not equal to the given one.
   */
  public KeywordsAssert hasPrivate(Object expectedPrivate) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting private of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualPrivate = actual.getPrivate();
    if (!Objects.areEqual(actualPrivate, expectedPrivate)) {
      failWithMessage(assertjErrorMessage, actual, expectedPrivate, actualPrivate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's protected is equal to the given one.
   * @param expectedProtected the given protected to compare the actual Keywords's protected to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's protected is not equal to the given one.
   */
  public KeywordsAssert hasProtected(Object expectedProtected) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting protected of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualProtected = actual.getProtected();
    if (!Objects.areEqual(actualProtected, expectedProtected)) {
      failWithMessage(assertjErrorMessage, actual, expectedProtected, actualProtected);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's public is equal to the given one.
   * @param expectedPublic the given public to compare the actual Keywords's public to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's public is not equal to the given one.
   */
  public KeywordsAssert hasPublic(Object expectedPublic) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting public of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualPublic = actual.getPublic();
    if (!Objects.areEqual(actualPublic, expectedPublic)) {
      failWithMessage(assertjErrorMessage, actual, expectedPublic, actualPublic);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's return is equal to the given one.
   * @param expectedReturn the given return to compare the actual Keywords's return to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's return is not equal to the given one.
   */
  public KeywordsAssert hasReturn(Object expectedReturn) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting return of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualReturn = actual.getReturn();
    if (!Objects.areEqual(actualReturn, expectedReturn)) {
      failWithMessage(assertjErrorMessage, actual, expectedReturn, actualReturn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
     * Verifies that the actual Keywords's short is equal to the given one.
     * @param expectedShort the given short to compare the actual Keywords's short to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Keywords's short is not equal to the given one.
     */
    public KeywordsAssert hasShort(short expectedShort) {
      // check that actual Keywords we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting short of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      short actualShort = actual.getShort();
      if (actualShort != expectedShort) {
        failWithMessage(assertjErrorMessage, actual, expectedShort, actualShort);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Keywords's short is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param expectedShort the value to compare the actual Keywords's short to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's short is not close enough to the given value.
   */
  public KeywordsAssert hasCloseToShort(short expectedShort, short offset) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    short actualShort = actual.getShort();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting short:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualShort, expectedShort, offset, Math.abs(expectedShort - actualShort));
    
    // check
    Assertions.assertThat(actualShort).overridingErrorMessage(assertjErrorMessage).isCloseTo(expectedShort, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's static is equal to the given one.
   * @param expectedStatic the given static to compare the actual Keywords's static to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's static is not equal to the given one.
   */
  public KeywordsAssert hasStatic(Object expectedStatic) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting static of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualStatic = actual.getStatic();
    if (!Objects.areEqual(actualStatic, expectedStatic)) {
      failWithMessage(assertjErrorMessage, actual, expectedStatic, actualStatic);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's strictfp is equal to the given one.
   * @param expectedStrictfp the given strictfp to compare the actual Keywords's strictfp to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's strictfp is not equal to the given one.
   */
  public KeywordsAssert hasStrictfp(Object expectedStrictfp) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting strictfp of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualStrictfp = actual.getStrictfp();
    if (!Objects.areEqual(actualStrictfp, expectedStrictfp)) {
      failWithMessage(assertjErrorMessage, actual, expectedStrictfp, actualStrictfp);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's super is equal to the given one.
   * @param expectedSuper the given super to compare the actual Keywords's super to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's super is not equal to the given one.
   */
  public KeywordsAssert hasSuper(Object expectedSuper) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting super of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualSuper = actual.getSuper();
    if (!Objects.areEqual(actualSuper, expectedSuper)) {
      failWithMessage(assertjErrorMessage, actual, expectedSuper, actualSuper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's switch contains the given String elements.
   * @param expectedSwitch the given elements that should be contained in actual Keywords's switch.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's switch does not contain all given String elements.
   * @throws java.io.IOException if actual.getSwitch() throws one.
   */
  public KeywordsAssert hasSwitch(String... expectedSwitch) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (expectedSwitch == null) failWithMessage("Expecting switch parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSwitch()).contains(expectedSwitch);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's switch contains <b>only<b> the given String elements and nothing else in whatever order.
   * 
   * @param expectedSwitch the given elements that should be contained in actual Keywords's switch.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's switch does not contain all given String elements and nothing else.
   * @throws java.io.IOException if actual.getSwitch() throws one.
   */
  public KeywordsAssert hasOnlySwitch(String... expectedSwitch) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (expectedSwitch == null) failWithMessage("Expecting switch parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSwitch()).containsOnly(expectedSwitch);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's switch does not contain the given String elements.
   *
   * @param expectedSwitch the given elements that should not be in actual Keywords's switch.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's switch contains any given String elements.
   * @throws java.io.IOException if actual.getSwitch() throws one.
   */
  public KeywordsAssert doesNotHaveSwitch(String... expectedSwitch) throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (expectedSwitch == null) failWithMessage("Expecting switch parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getSwitch()).doesNotContain(expectedSwitch);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords has no switch.
   * @return this assertion object.
   * @throws AssertionError if the actual Keywords's switch is not empty.
   * @throws java.io.IOException if actual.getSwitch() throws one.
   */
  public KeywordsAssert hasNoSwitch() throws java.io.IOException {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have switch but had :\n  <%s>";
    
    // check
    if (actual.getSwitch().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getSwitch()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Keywords's synchronized is equal to the given one.
   * @param expectedSynchronized the given synchronized to compare the actual Keywords's synchronized to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's synchronized is not equal to the given one.
   */
  public KeywordsAssert hasSynchronized(Object expectedSynchronized) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting synchronized of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualSynchronized = actual.getSynchronized();
    if (!Objects.areEqual(actualSynchronized, expectedSynchronized)) {
      failWithMessage(assertjErrorMessage, actual, expectedSynchronized, actualSynchronized);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's this is equal to the given one.
   * @param expectedThis the given this to compare the actual Keywords's this to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's this is not equal to the given one.
   */
  public KeywordsAssert hasThis(Object expectedThis) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting this of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualThis = actual.getThis();
    if (!Objects.areEqual(actualThis, expectedThis)) {
      failWithMessage(assertjErrorMessage, actual, expectedThis, actualThis);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's throw is equal to the given one.
   * @param expectedThrow the given throw to compare the actual Keywords's throw to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's throw is not equal to the given one.
   */
  public KeywordsAssert hasThrow(Object expectedThrow) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting throw of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualThrow = actual.getThrow();
    if (!Objects.areEqual(actualThrow, expectedThrow)) {
      failWithMessage(assertjErrorMessage, actual, expectedThrow, actualThrow);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's throws is equal to the given one.
   * @param expectedThrows the given throws to compare the actual Keywords's throws to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's throws is not equal to the given one.
   */
  public KeywordsAssert hasThrows(Object expectedThrows) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting throws of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualThrows = actual.getThrows();
    if (!Objects.areEqual(actualThrows, expectedThrows)) {
      failWithMessage(assertjErrorMessage, actual, expectedThrows, actualThrows);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's transient is equal to the given one.
   * @param expectedTransient the given transient to compare the actual Keywords's transient to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's transient is not equal to the given one.
   */
  public KeywordsAssert hasTransient(Object expectedTransient) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting transient of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualTransient = actual.getTransient();
    if (!Objects.areEqual(actualTransient, expectedTransient)) {
      failWithMessage(assertjErrorMessage, actual, expectedTransient, actualTransient);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's true is equal to the given one.
   * @param expectedTrue the given true to compare the actual Keywords's true to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's true is not equal to the given one.
   */
  public KeywordsAssert hasTrue(Object expectedTrue) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting true of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualTrue = actual.getTrue();
    if (!Objects.areEqual(actualTrue, expectedTrue)) {
      failWithMessage(assertjErrorMessage, actual, expectedTrue, actualTrue);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's try is equal to the given one.
   * @param expectedTry the given try to compare the actual Keywords's try to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's try is not equal to the given one.
   */
  public KeywordsAssert hasTry(Object expectedTry) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting try of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualTry = actual.getTry();
    if (!Objects.areEqual(actualTry, expectedTry)) {
      failWithMessage(assertjErrorMessage, actual, expectedTry, actualTry);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's void is equal to the given one.
   * @param expectedVoid the given void to compare the actual Keywords's void to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's void is not equal to the given one.
   */
  public KeywordsAssert hasVoid(Void expectedVoid) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting void of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Void actualVoid = actual.getVoid();
    if (!Objects.areEqual(actualVoid, expectedVoid)) {
      failWithMessage(assertjErrorMessage, actual, expectedVoid, actualVoid);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's volatile is equal to the given one.
   * @param expectedVolatile the given volatile to compare the actual Keywords's volatile to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's volatile is not equal to the given one.
   */
  public KeywordsAssert hasVolatile(Object expectedVolatile) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting volatile of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualVolatile = actual.getVolatile();
    if (!Objects.areEqual(actualVolatile, expectedVolatile)) {
      failWithMessage(assertjErrorMessage, actual, expectedVolatile, actualVolatile);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords's while is equal to the given one.
   * @param expectedWhile the given while to compare the actual Keywords's while to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords's while is not equal to the given one.
   */
  public KeywordsAssert hasWhile(Object expectedWhile) {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting while of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualWhile = actual.getWhile();
    if (!Objects.areEqual(actualWhile, expectedWhile)) {
      failWithMessage(assertjErrorMessage, actual, expectedWhile, actualWhile);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords is class.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords is not class.
   */
  public KeywordsAssert isClass() {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isClass()) {
      failWithMessage("\nExpecting that actual Keywords is class but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Keywords is not class.
   * @return this assertion object.
   * @throws AssertionError - if the actual Keywords is class.
   */
  public KeywordsAssert isNotClass() {
    // check that actual Keywords we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isClass()) {
      failWithMessage("\nExpecting that actual Keywords is not class but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
