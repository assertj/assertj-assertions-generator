package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractComparableAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Name} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class NameAssert extends AbstractComparableAssert<NameAssert, Name> {

  /**
   * Creates a new <code>{@link NameAssert}</code> to make assertions on actual Name.
   * @param actual the Name we want to make assertions on.
   */
  public NameAssert(Name actual) {
    super(actual, NameAssert.class);
  }

  /**
   * An entry point for NameAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myName)</code> and get specific assertion with code completion.
   * @param actual the Name we want to make assertions on.
   * @return a new <code>{@link NameAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static NameAssert assertThat(Name actual) {
    return new NameAssert(actual);
  }

  /**
   * Verifies that the actual Name's first is equal to the given one.
   * @param first the given first to compare the actual Name's first to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Name's first is not equal to the given one.
   */
  public NameAssert hasFirst(String first) {
    // check that actual Name we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting first of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFirst = actual.getFirst();
    if (!Objects.areEqual(actualFirst, first)) {
      failWithMessage(assertjErrorMessage, actual, first, actualFirst);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Name's first is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Name's first is not <code>null</code>.
   */
  public NameAssert hasNullFirst() {
    // check that actual Name we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting first of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualFirst = actual.getFirst();
    if (actualFirst != null) {
      failWithMessage(assertjErrorMessage, actual, actualFirst);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Name's first is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Name's first is <code>null</code>.
   */
  public NameAssert hasNotNullFirst() {
    // check that actual Name we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting first of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualFirst = actual.getFirst();
    if (actualFirst == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Name's last is equal to the given one.
   * @param last the given last to compare the actual Name's last to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Name's last is not equal to the given one.
   */
  public NameAssert hasLast(String last) {
    // check that actual Name we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting last of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLast = actual.getLast();
    if (!Objects.areEqual(actualLast, last)) {
      failWithMessage(assertjErrorMessage, actual, last, actualLast);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Name's last is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Name's last is not <code>null</code>.
   */
  public NameAssert hasNullLast() {
    // check that actual Name we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting last of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualLast = actual.getLast();
    if (actualLast != null) {
      failWithMessage(assertjErrorMessage, actual, actualLast);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Name's last is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Name's last is <code>null</code>.
   */
  public NameAssert hasNotNullLast() {
    // check that actual Name we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting last of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualLast = actual.getLast();
    if (actualLast == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

}
