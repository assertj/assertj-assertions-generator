package org.assertj.assertions.generator.data;

import java.util.Objects;
import org.assertj.core.api.AbstractObjectAssert;

/**
 * {@link ${nestedClass}} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ${nestedClass}Assert extends AbstractObjectAssert<${nestedClass}Assert, ${nestedClass}> {

  /**
   * Creates a new <code>{@link ${nestedClass}Assert}</code> to make assertions on actual ${nestedClass}.
   * @param actual the ${nestedClass} we want to make assertions on.
   */
  public ${nestedClass}Assert(${nestedClass} actual) {
    super(actual, ${nestedClass}Assert.class);
  }

  /**
   * An entry point for ${nestedClass}Assert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(my${nestedClass})</code> and get specific assertion with code completion.
   * @param actual the ${nestedClass} we want to make assertions on.
   * @return a new <code>{@link ${nestedClass}Assert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ${nestedClass}Assert assertThat(${nestedClass} actual) {
    return new ${nestedClass}Assert(actual);
  }

  /**
   * Verifies that the actual ${nestedClass}'s name is equal to the given one.
   * @param name the given name to compare the actual ${nestedClass}'s name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ${nestedClass}'s name is not equal to the given one.
   */
  public ${nestedClass}Assert hasName(String name) {
    // check that actual ${nestedClass} we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.deepEquals(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

}
