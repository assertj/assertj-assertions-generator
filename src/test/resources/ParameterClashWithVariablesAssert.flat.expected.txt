package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * {@link ParameterClashWithVariables} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class ParameterClashWithVariablesAssert extends AbstractObjectAssert<ParameterClashWithVariablesAssert, ParameterClashWithVariables> {

  /**
   * Creates a new <code>{@link ParameterClashWithVariablesAssert}</code> to make assertions on actual ParameterClashWithVariables.
   * @param actual the ParameterClashWithVariables we want to make assertions on.
   */
  public ParameterClashWithVariablesAssert(ParameterClashWithVariables actual) {
    super(actual, ParameterClashWithVariablesAssert.class);
  }

  /**
   * An entry point for ParameterClashWithVariablesAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myParameterClashWithVariables)</code> and get specific assertion with code completion.
   * @param actual the ParameterClashWithVariables we want to make assertions on.
   * @return a new <code>{@link ParameterClashWithVariablesAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static ParameterClashWithVariablesAssert assertThat(ParameterClashWithVariables actual) {
    return new ParameterClashWithVariablesAssert(actual);
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's bloodPressure is equal to the given one.
   * @param bloodPressure the given bloodPressure to compare the actual ParameterClashWithVariables's bloodPressure to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's bloodPressure is not equal to the given one.
   */
  public ParameterClashWithVariablesAssert hasBloodPressure(Double bloodPressure) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bloodPressure of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualBloodPressure = actual.bloodPressure;
    if (!Objects.areEqual(actualBloodPressure, bloodPressure)) {
      failWithMessage(assertjErrorMessage, actual, bloodPressure, actualBloodPressure);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's bloodPressure is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param bloodPressure the value to compare the actual ParameterClashWithVariables's bloodPressure to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's bloodPressure is not close enough to the given value.
   */
  public ParameterClashWithVariablesAssert hasBloodPressureCloseTo(Double bloodPressure, Double assertjOffset) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    Double actualBloodPressure = actual.bloodPressure;

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting bloodPressure:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualBloodPressure, bloodPressure, assertjOffset, Math.abs(bloodPressure - actualBloodPressure));

    // check
    Assertions.assertThat(actualBloodPressure).overridingErrorMessage(assertjErrorMessage).isCloseTo(bloodPressure, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's bloodPressure is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's bloodPressure is not <code>null</code>.
   */
  public ParameterClashWithVariablesAssert hasNullBloodPressure() {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bloodPressure of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Double actualBloodPressure = actual.bloodPressure;
    if (actualBloodPressure != null) {
      failWithMessage(assertjErrorMessage, actual, actualBloodPressure);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's bloodPressure is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's bloodPressure is <code>null</code>.
   */
  public ParameterClashWithVariablesAssert hasNotNullBloodPressure() {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bloodPressure of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Double actualBloodPressure = actual.bloodPressure;
    if (actualBloodPressure == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's bmi is equal to the given one.
   * @param bmi the given bmi to compare the actual ParameterClashWithVariables's bmi to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's bmi is not equal to the given one.
   */
  public ParameterClashWithVariablesAssert hasBmi(Float bmi) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bmi of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Float actualBmi = actual.bmi;
    if (!Objects.areEqual(actualBmi, bmi)) {
      failWithMessage(assertjErrorMessage, actual, bmi, actualBmi);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's bmi is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param bmi the value to compare the actual ParameterClashWithVariables's bmi to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's bmi is not close enough to the given value.
   */
  public ParameterClashWithVariablesAssert hasBmiCloseTo(Float bmi, Float assertjOffset) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    Float actualBmi = actual.bmi;

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting bmi:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualBmi, bmi, assertjOffset, Math.abs(bmi - actualBmi));

    // check
    Assertions.assertThat(actualBmi).overridingErrorMessage(assertjErrorMessage).isCloseTo(bmi, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's bmi is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's bmi is not <code>null</code>.
   */
  public ParameterClashWithVariablesAssert hasNullBmi() {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bmi of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Float actualBmi = actual.bmi;
    if (actualBmi != null) {
      failWithMessage(assertjErrorMessage, actual, actualBmi);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's bmi is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's bmi is <code>null</code>.
   */
  public ParameterClashWithVariablesAssert hasNotNullBmi() {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting bmi of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Float actualBmi = actual.bmi;
    if (actualBmi == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's height is equal to the given one.
   * @param height the given height to compare the actual ParameterClashWithVariables's height to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's height is not equal to the given one.
   */
  public ParameterClashWithVariablesAssert hasHeight(float height) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting height of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check value for height
    float actualHeight = actual.height;
    if (actualHeight != height) {
      failWithMessage(assertjErrorMessage, actual, height, actualHeight);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's height is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param height the value to compare the actual ParameterClashWithVariables's height to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's height is not close enough to the given value.
   */
  public ParameterClashWithVariablesAssert hasHeightCloseTo(float height, float assertjOffset) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    float actualHeight = actual.height;

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting height:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualHeight, height, assertjOffset, Math.abs(height - actualHeight));

    // check
    Assertions.assertThat(actualHeight).overridingErrorMessage(assertjErrorMessage).isCloseTo(height, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's offset is equal to the given one.
   * @param offset the given offset to compare the actual ParameterClashWithVariables's offset to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's offset is not equal to the given one.
   */
  public ParameterClashWithVariablesAssert hasOffset(String offset) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting offset of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOffset = actual.offset;
    if (!Objects.areEqual(actualOffset, offset)) {
      failWithMessage(assertjErrorMessage, actual, offset, actualOffset);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's offset is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's offset is not <code>null</code>.
   */
  public ParameterClashWithVariablesAssert hasNullOffset() {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting offset of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualOffset = actual.offset;
    if (actualOffset != null) {
      failWithMessage(assertjErrorMessage, actual, actualOffset);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's offset is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's offset is <code>null</code>.
   */
  public ParameterClashWithVariablesAssert hasNotNullOffset() {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting offset of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualOffset = actual.offset;
    if (actualOffset == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's weight is equal to the given one.
   * @param weight the given weight to compare the actual ParameterClashWithVariables's weight to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's weight is not equal to the given one.
   */
  public ParameterClashWithVariablesAssert hasWeight(double weight) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting weight of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check value for weight
    double actualWeight = actual.weight;
    if (actualWeight != weight) {
      failWithMessage(assertjErrorMessage, actual, weight, actualWeight);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ParameterClashWithVariables's weight is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param weight the value to compare the actual ParameterClashWithVariables's weight to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual ParameterClashWithVariables's weight is not close enough to the given value.
   */
  public ParameterClashWithVariablesAssert hasWeightCloseTo(double weight, double assertjOffset) {
    // check that actual ParameterClashWithVariables we want to make assertions on is not null.
    isNotNull();

    double actualWeight = actual.weight;

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting weight:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualWeight, weight, assertjOffset, Math.abs(weight - actualWeight));

    // check
    Assertions.assertThat(actualWeight).overridingErrorMessage(assertjErrorMessage).isCloseTo(weight, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

}
