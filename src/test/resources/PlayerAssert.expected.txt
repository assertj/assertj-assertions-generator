package org.assertj.assertions.generator.data.nba;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Player} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlayerAssert extends AbstractAssert<PlayerAssert, Player> {

  /**
   * Creates a new <code>{@link PlayerAssert}</code> to make assertions on actual Player.
   * @param actual the Player we want to make assertions on.
   */
  public PlayerAssert(Player actual) {
    super(actual, PlayerAssert.class);
  }

  /**
   * An entry point for PlayerAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPlayer)</code> and get specific assertion with code completion.
   * @param actual the Player we want to make assertions on.
   * @return a new <code>{@link PlayerAssert}</code>
   */
  public static PlayerAssert assertThat(Player actual) {
    return new PlayerAssert(actual);
  }

  /**
     * Verifies that the actual Player's assistsPerGame is equal to the given one.
     * @param assistsPerGame the given assistsPerGame to compare the actual Player's assistsPerGame to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Player's assistsPerGame is not equal to the given one.
     */
    public PlayerAssert hasAssistsPerGame(int assistsPerGame) {
      // check that actual Player we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting assistsPerGame of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      int actualAssistsPerGame = actual.getAssistsPerGame();
      if (actualAssistsPerGame != assistsPerGame) {
        failWithMessage(assertjErrorMessage, actual, assistsPerGame, actualAssistsPerGame);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Player's assistsPerGame is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param assistsPerGame the value to compare the actual Player's assistsPerGame to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's assistsPerGame is not close enough to the given value.
   */
  public PlayerAssert hasCloseToAssistsPerGame(int assistsPerGame, int offset) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    int actualAssistsPerGame = actual.getAssistsPerGame();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting assistsPerGame:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualAssistsPerGame, assistsPerGame, offset, Math.abs(assistsPerGame - actualAssistsPerGame));
    
    // check
    Assertions.assertThat(actualAssistsPerGame).overridingErrorMessage(assertjErrorMessage).isCloseTo(assistsPerGame, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's name is equal to the given one.
   * @param name the given name to compare the actual Player's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's name is not equal to the given one.
   */
  public PlayerAssert hasName(org.assertj.assertions.generator.data.Name name) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    org.assertj.assertions.generator.data.Name actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's points contains the given int[] elements.
   * @param points the given elements that should be contained in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points does not contain all given int[] elements.
   */
  public PlayerAssert hasPoints(int[]... points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPoints(), points);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's points contains <b>only<b> the given int[] elements and nothing else in whatever order.
   * @param points the given elements that should be contained in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points does not contain all given int[] elements.
   */
  public PlayerAssert hasOnlyPoints(int[]... points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPoints(), points);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's points does not contain the given int[] elements.
   *
   * @param points the given elements that should not be in actual Player's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points contains any given int[] elements.
   */
  public PlayerAssert doesNotHavePoints(int[]... points) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPoints(), points);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player has no points.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's points is not empty.
   */
  public PlayerAssert hasNoPoints() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have points but had :\n  <%s>";
    
    // check
    if (actual.getPoints().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPoints());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
     * Verifies that the actual Player's pointsPerGame is equal to the given one.
     * @param pointsPerGame the given pointsPerGame to compare the actual Player's pointsPerGame to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Player's pointsPerGame is not equal to the given one.
     */
    public PlayerAssert hasPointsPerGame(int pointsPerGame) {
      // check that actual Player we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting pointsPerGame of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      int actualPointsPerGame = actual.getPointsPerGame();
      if (actualPointsPerGame != pointsPerGame) {
        failWithMessage(assertjErrorMessage, actual, pointsPerGame, actualPointsPerGame);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Player's pointsPerGame is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param pointsPerGame the value to compare the actual Player's pointsPerGame to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's pointsPerGame is not close enough to the given value.
   */
  public PlayerAssert hasCloseToPointsPerGame(int pointsPerGame, int offset) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    int actualPointsPerGame = actual.getPointsPerGame();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting pointsPerGame:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualPointsPerGame, pointsPerGame, offset, Math.abs(pointsPerGame - actualPointsPerGame));
    
    // check
    Assertions.assertThat(actualPointsPerGame).overridingErrorMessage(assertjErrorMessage).isCloseTo(pointsPerGame, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's previousTeams contains the given String elements.
   * @param previousTeams the given elements that should be contained in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams does not contain all given String elements.
   */
  public PlayerAssert hasPreviousTeams(String... previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (previousTeams == null) failWithMessage("Expecting previousTeams parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getPreviousTeams()).contains(previousTeams);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's previousTeams contains <b>only<b> the given String elements and nothing else in whatever order.
   * 
   * @param previousTeams the given elements that should be contained in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams does not contain all given String elements and nothing else.
   */
  public PlayerAssert hasOnlyPreviousTeams(String... previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (previousTeams == null) failWithMessage("Expecting previousTeams parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getPreviousTeams()).containsOnly(previousTeams);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's previousTeams does not contain the given String elements.
   *
   * @param previousTeams the given elements that should not be in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams contains any given String elements.
   */
  public PlayerAssert doesNotHavePreviousTeams(String... previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (previousTeams == null) failWithMessage("Expecting previousTeams parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getPreviousTeams()).doesNotContain(previousTeams);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player has no previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams is not empty.
   */
  public PlayerAssert hasNoPreviousTeams() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have previousTeams but had :\n  <%s>";
    
    // check
    if (actual.getPreviousTeams().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getPreviousTeams()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
     * Verifies that the actual Player's reboundsPerGame is equal to the given one.
     * @param reboundsPerGame the given reboundsPerGame to compare the actual Player's reboundsPerGame to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Player's reboundsPerGame is not equal to the given one.
     */
    public PlayerAssert hasReboundsPerGame(int reboundsPerGame) {
      // check that actual Player we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting reboundsPerGame of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      int actualReboundsPerGame = actual.getReboundsPerGame();
      if (actualReboundsPerGame != reboundsPerGame) {
        failWithMessage(assertjErrorMessage, actual, reboundsPerGame, actualReboundsPerGame);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Player's reboundsPerGame is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param reboundsPerGame the value to compare the actual Player's reboundsPerGame to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's reboundsPerGame is not close enough to the given value.
   */
  public PlayerAssert hasCloseToReboundsPerGame(int reboundsPerGame, int offset) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    int actualReboundsPerGame = actual.getReboundsPerGame();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting reboundsPerGame:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualReboundsPerGame, reboundsPerGame, offset, Math.abs(reboundsPerGame - actualReboundsPerGame));
    
    // check
    Assertions.assertThat(actualReboundsPerGame).overridingErrorMessage(assertjErrorMessage).isCloseTo(reboundsPerGame, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
     * Verifies that the actual Player's size is equal to the given one.
     * @param size the given size to compare the actual Player's size to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Player's size is not equal to the given one.
     */
    public PlayerAssert hasSize(float size) {
      // check that actual Player we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting size of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      float actualSize = actual.getSize();
      if (actualSize != size) {
        failWithMessage(assertjErrorMessage, actual, size, actualSize);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Player's size is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param size the value to compare the actual Player's size to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's size is not close enough to the given value.
   */
  public PlayerAssert hasCloseToSize(float size, float offset) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    float actualSize = actual.getSize();
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting size:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualSize, size, offset, Math.abs(size - actualSize));
    
    // check
    Assertions.assertThat(actualSize).overridingErrorMessage(assertjErrorMessage).isCloseTo(size, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's team is equal to the given one.
   * @param team the given team to compare the actual Player's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's team is not equal to the given one.
   */
  public PlayerAssert hasTeam(String team) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTeam = actual.getTeam();
    if (!Objects.areEqual(actualTeam, team)) {
      failWithMessage(assertjErrorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's teamMates contains the given Player elements.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given Player elements.
   */
  public PlayerAssert hasTeamMates(Player... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's teamMates contains <b>only<b> the given Player elements and nothing else in whatever order.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given Player elements.
   */
  public PlayerAssert hasOnlyTeamMates(Player... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's teamMates does not contain the given Player elements.
   *
   * @param teamMates the given elements that should not be in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates contains any given Player elements.
   */
  public PlayerAssert doesNotHaveTeamMates(Player... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player has no teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates is not empty.
   */
  public PlayerAssert hasNoTeamMates() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have teamMates but had :\n  <%s>";
    
    // check
    if (actual.getTeamMates().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTeamMates());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Player is rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is not rookie.
   */
  public PlayerAssert isRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isRookie()) {
      failWithMessage("\nExpecting that actual Player is rookie but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player is not rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is rookie.
   */
  public PlayerAssert isNotRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isRookie()) {
      failWithMessage("\nExpecting that actual Player is not rookie but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
