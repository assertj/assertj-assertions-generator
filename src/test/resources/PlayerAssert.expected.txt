package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link Player} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlayerAssert extends AbstractAssert<PlayerAssert, Player> {

  /**
   * Creates a new </code>{@link PlayerAssert}</code> to make assertions on actual Player.
   * @param actual the Player we want to make assertions on.
   */
  public PlayerAssert(Player actual) {
    super(actual, PlayerAssert.class);
  }

  /**
   * An entry point for PlayerAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myPlayer)</code> and get specific assertion with code completion.
   * @param actual the Player we want to make assertions on.
   * @return a new </code>{@link PlayerAssert}</code>
   */
  public static PlayerAssert assertThat(Player actual) {
    return new PlayerAssert(actual);
  }

  /**
   * Verifies that the actual Player's assistsPerGame is equal to the given one.
   * @param assistsPerGame the given assistsPerGame to compare the actual Player's assistsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's assistsPerGame is not equal to the given one.
   */
  public PlayerAssert hasAssistsPerGame(int assistsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = "\nExpected assistsPerGame of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";
    
    // check
    int actualAssistsPerGame = actual.getAssistsPerGame();
    if (actualAssistsPerGame != assistsPerGame) {
      failWithMessage(errorMessage, actual, assistsPerGame, actualAssistsPerGame);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's name is equal to the given one.
   * @param name the given name to compare the actual Player's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's name is not equal to the given one.
   */
  public PlayerAssert hasName(Name name) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";
    
    // check
    Name actualName = actual.getName();
    if (!actualName.equals(name)) {
      failWithMessage(errorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's pointsPerGame is equal to the given one.
   * @param pointsPerGame the given pointsPerGame to compare the actual Player's pointsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's pointsPerGame is not equal to the given one.
   */
  public PlayerAssert hasPointsPerGame(int pointsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = "\nExpected pointsPerGame of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";
    
    // check
    int actualPointsPerGame = actual.getPointsPerGame();
    if (actualPointsPerGame != pointsPerGame) {
      failWithMessage(errorMessage, actual, pointsPerGame, actualPointsPerGame);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's previousTeams contains the given String elements.
   * @param previousTeams the given elements that should be contained in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams does not contain all given String elements.
   */
  public PlayerAssert hasPreviousTeams(String... previousTeams) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (previousTeams == null) throw new AssertionError("Expecting previousTeams parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getPreviousTeams()).contains(previousTeams);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getPreviousTeams().contains(previousTeams)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getPreviousTeams()).overridingErrorMessage("\nmy error message %s", "arg1").contains(previousTeams);
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player has no previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams is not empty.
   */
  public PlayerAssert hasNoPreviousTeams() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have previousTeams but had :\n  <%s>";
    
    // check
    if (actual.getPreviousTeams().length > 0)  {
      failWithMessage(errorMessage, actual, java.util.Arrays.toString(actual.getPreviousTeams()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Player's reboundsPerGame is equal to the given one.
   * @param reboundsPerGame the given reboundsPerGame to compare the actual Player's reboundsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's reboundsPerGame is not equal to the given one.
   */
  public PlayerAssert hasReboundsPerGame(int reboundsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = "\nExpected reboundsPerGame of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";
    
    // check
    int actualReboundsPerGame = actual.getReboundsPerGame();
    if (actualReboundsPerGame != reboundsPerGame) {
      failWithMessage(errorMessage, actual, reboundsPerGame, actualReboundsPerGame);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player is rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is not rookie.
   */
  public PlayerAssert isRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isRookie()) {
      failWithMessage("\nExpected actual Player to be rookie but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player is not rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is rookie.
   */
  public PlayerAssert isNotRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isRookie()) {
      failWithMessage("\nExpected actual Player not to be rookie but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's team is equal to the given one.
   * @param team the given team to compare the actual Player's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's team is not equal to the given one.
   */
  public PlayerAssert hasTeam(String team) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = "\nExpected team of:\n  <%s>\nto be:\n  <%s>\n but was:\n  <%s>";
    
    // check
    String actualTeam = actual.getTeam();
    if (!actualTeam.equals(team)) {
      failWithMessage(errorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's teamMates contains the given Player elements.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given Player elements.
   */
  public PlayerAssert hasTeamMates(Player... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player varargs is not null.
    if (teamMates == null) throw new AssertionError("Expecting teamMates parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTeamMates()).contains(teamMates);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getTeamMates().contains(teamMates)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getTeamMates()).overridingErrorMessage("\nmy error message %s", "arg1").contains(teamMates);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player has no teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates is not empty.
   */
  public PlayerAssert hasNoTeamMates() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have teamMates but had :\n  <%s>";
    
    // check
    if (!actual.getTeamMates().isEmpty()) {
      failWithMessage(errorMessage, actual, actual.getTeamMates());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
