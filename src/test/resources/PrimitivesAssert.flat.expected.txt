package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.util.Objects;

/**
 * {@link Primitives} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class PrimitivesAssert extends AbstractObjectAssert<PrimitivesAssert, Primitives> {

  /**
   * Creates a new <code>{@link PrimitivesAssert}</code> to make assertions on actual Primitives.
   * @param actual the Primitives we want to make assertions on.
   */
  public PrimitivesAssert(Primitives actual) {
    super(actual, PrimitivesAssert.class);
  }

  /**
   * An entry point for PrimitivesAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPrimitives)</code> and get specific assertion with code completion.
   * @param actual the Primitives we want to make assertions on.
   * @return a new <code>{@link PrimitivesAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static PrimitivesAssert assertThat(Primitives actual) {
    return new PrimitivesAssert(actual);
  }

  /**
   * Verifies that the actual Primitives is boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives is not boolean.
   */
  public PrimitivesAssert isBoolean() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isBoolean()) {
      failWithMessage("\nExpecting that actual Primitives is boolean but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives is not boolean.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives is boolean.
   */
  public PrimitivesAssert isNotBoolean() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isBoolean()) {
      failWithMessage("\nExpecting that actual Primitives is not boolean but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives is boolean wrapper.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives is not boolean wrapper.
   */
  public PrimitivesAssert isBooleanWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.FALSE, actual.isBooleanWrapper())) {
      failWithMessage("\nExpecting that actual Primitives is boolean wrapper but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives is not boolean wrapper.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives is boolean wrapper.
   */
  public PrimitivesAssert isNotBooleanWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.TRUE, actual.isBooleanWrapper())) {
      failWithMessage("\nExpecting that actual Primitives is not boolean wrapper but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's byte is equal to the given one.
   * @param expectedByte the given byte to compare the actual Primitives's byte to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's byte is not equal to the given one.
   */
  public PrimitivesAssert hasByte(byte expectedByte) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting byte of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    byte actualByte = actual.getByte();
    if (actualByte != expectedByte) {
      failWithMessage(assertjErrorMessage, actual, expectedByte, actualByte);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's byteWrapper is equal to the given one.
   * @param byteWrapper the given byteWrapper to compare the actual Primitives's byteWrapper to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's byteWrapper is not equal to the given one.
   */
  public PrimitivesAssert hasByteWrapper(Byte byteWrapper) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting byteWrapper of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Byte actualByteWrapper = actual.getByteWrapper();
    if (!Objects.areEqual(actualByteWrapper, byteWrapper)) {
      failWithMessage(assertjErrorMessage, actual, byteWrapper, actualByteWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's byteWrapper is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's byteWrapper is not <code>null</code>.
   */
  public PrimitivesAssert hasNullByteWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting byteWrapper of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Byte actualByteWrapper = actual.getByteWrapper();
    if (actualByteWrapper != null) {
      failWithMessage(assertjErrorMessage, actual, actualByteWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's byteWrapper is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's byteWrapper is <code>null</code>.
   */
  public PrimitivesAssert hasNotNullByteWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting byteWrapper of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Byte actualByteWrapper = actual.getByteWrapper();
    if (actualByteWrapper == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's char is equal to the given one.
   * @param expectedChar the given char to compare the actual Primitives's char to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's char is not equal to the given one.
   */
  public PrimitivesAssert hasChar(char expectedChar) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting char of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check char char matches
    char actualChar = actual.getChar();
    if (actualChar != expectedChar) {
      failWithMessage(assertjErrorMessage, actual, expectedChar, actualChar);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's character is equal to the given one.
   * @param character the given character to compare the actual Primitives's character to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's character is not equal to the given one.
   */
  public PrimitivesAssert hasCharacter(Character character) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting character of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Character actualCharacter = actual.getCharacter();
    if (!Objects.areEqual(actualCharacter, character)) {
      failWithMessage(assertjErrorMessage, actual, character, actualCharacter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's character is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's character is not <code>null</code>.
   */
  public PrimitivesAssert hasNullCharacter() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting character of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Character actualCharacter = actual.getCharacter();
    if (actualCharacter != null) {
      failWithMessage(assertjErrorMessage, actual, actualCharacter);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's character is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's character is <code>null</code>.
   */
  public PrimitivesAssert hasNotNullCharacter() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting character of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Character actualCharacter = actual.getCharacter();
    if (actualCharacter == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's double is equal to the given one.
   * @param expectedDouble the given double to compare the actual Primitives's double to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's double is not equal to the given one.
   */
  public PrimitivesAssert hasDouble(double expectedDouble) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting double of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check value for double
    double actualDouble = actual.getDouble();
    if (actualDouble != expectedDouble) {
      failWithMessage(assertjErrorMessage, actual, expectedDouble, actualDouble);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's double is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param expectedDouble the value to compare the actual Primitives's double to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's double is not close enough to the given value.
   */
  public PrimitivesAssert hasDoubleCloseTo(double expectedDouble, double assertjOffset) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    double actualDouble = actual.getDouble();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting double:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualDouble, expectedDouble, assertjOffset, Math.abs(expectedDouble - actualDouble));

    // check
    Assertions.assertThat(actualDouble).overridingErrorMessage(assertjErrorMessage).isCloseTo(expectedDouble, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's doubleWrapper is equal to the given one.
   * @param doubleWrapper the given doubleWrapper to compare the actual Primitives's doubleWrapper to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's doubleWrapper is not equal to the given one.
   */
  public PrimitivesAssert hasDoubleWrapper(Double doubleWrapper) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting doubleWrapper of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Double actualDoubleWrapper = actual.getDoubleWrapper();
    if (!Objects.areEqual(actualDoubleWrapper, doubleWrapper)) {
      failWithMessage(assertjErrorMessage, actual, doubleWrapper, actualDoubleWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's doubleWrapper is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param doubleWrapper the value to compare the actual Primitives's doubleWrapper to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's doubleWrapper is not close enough to the given value.
   */
  public PrimitivesAssert hasDoubleWrapperCloseTo(Double doubleWrapper, Double assertjOffset) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    Double actualDoubleWrapper = actual.getDoubleWrapper();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting doubleWrapper:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualDoubleWrapper, doubleWrapper, assertjOffset, Math.abs(doubleWrapper - actualDoubleWrapper));

    // check
    Assertions.assertThat(actualDoubleWrapper).overridingErrorMessage(assertjErrorMessage).isCloseTo(doubleWrapper, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's doubleWrapper is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's doubleWrapper is not <code>null</code>.
   */
  public PrimitivesAssert hasNullDoubleWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting doubleWrapper of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Double actualDoubleWrapper = actual.getDoubleWrapper();
    if (actualDoubleWrapper != null) {
      failWithMessage(assertjErrorMessage, actual, actualDoubleWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's doubleWrapper is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's doubleWrapper is <code>null</code>.
   */
  public PrimitivesAssert hasNotNullDoubleWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting doubleWrapper of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Double actualDoubleWrapper = actual.getDoubleWrapper();
    if (actualDoubleWrapper == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives is enabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives is not enabled.
   */
  public PrimitivesAssert isEnabled() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.FALSE, actual.isEnabled())) {
      failWithMessage("\nExpecting that actual Primitives is enabled but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives is not enabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives is enabled.
   */
  public PrimitivesAssert isNotEnabled() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.TRUE, actual.isEnabled())) {
      failWithMessage("\nExpecting that actual Primitives is not enabled but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's float is equal to the given one.
   * @param expectedFloat the given float to compare the actual Primitives's float to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's float is not equal to the given one.
   */
  public PrimitivesAssert hasFloat(float expectedFloat) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting float of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check value for float
    float actualFloat = actual.getFloat();
    if (actualFloat != expectedFloat) {
      failWithMessage(assertjErrorMessage, actual, expectedFloat, actualFloat);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's float is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param expectedFloat the value to compare the actual Primitives's float to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's float is not close enough to the given value.
   */
  public PrimitivesAssert hasFloatCloseTo(float expectedFloat, float assertjOffset) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    float actualFloat = actual.getFloat();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting float:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualFloat, expectedFloat, assertjOffset, Math.abs(expectedFloat - actualFloat));

    // check
    Assertions.assertThat(actualFloat).overridingErrorMessage(assertjErrorMessage).isCloseTo(expectedFloat, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's floatWrapper is equal to the given one.
   * @param floatWrapper the given floatWrapper to compare the actual Primitives's floatWrapper to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's floatWrapper is not equal to the given one.
   */
  public PrimitivesAssert hasFloatWrapper(Float floatWrapper) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting floatWrapper of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Float actualFloatWrapper = actual.getFloatWrapper();
    if (!Objects.areEqual(actualFloatWrapper, floatWrapper)) {
      failWithMessage(assertjErrorMessage, actual, floatWrapper, actualFloatWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's floatWrapper is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param floatWrapper the value to compare the actual Primitives's floatWrapper to.
   * @param assertjOffset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's floatWrapper is not close enough to the given value.
   */
  public PrimitivesAssert hasFloatWrapperCloseTo(Float floatWrapper, Float assertjOffset) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    Float actualFloatWrapper = actual.getFloatWrapper();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting floatWrapper:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualFloatWrapper, floatWrapper, assertjOffset, Math.abs(floatWrapper - actualFloatWrapper));

    // check
    Assertions.assertThat(actualFloatWrapper).overridingErrorMessage(assertjErrorMessage).isCloseTo(floatWrapper, Assertions.within(assertjOffset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's floatWrapper is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's floatWrapper is not <code>null</code>.
   */
  public PrimitivesAssert hasNullFloatWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting floatWrapper of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Float actualFloatWrapper = actual.getFloatWrapper();
    if (actualFloatWrapper != null) {
      failWithMessage(assertjErrorMessage, actual, actualFloatWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's floatWrapper is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's floatWrapper is <code>null</code>.
   */
  public PrimitivesAssert hasNotNullFloatWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting floatWrapper of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Float actualFloatWrapper = actual.getFloatWrapper();
    if (actualFloatWrapper == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's int is equal to the given one.
   * @param expectedInt the given int to compare the actual Primitives's int to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's int is not equal to the given one.
   */
  public PrimitivesAssert hasInt(int expectedInt) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting int of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualInt = actual.getInt();
    if (actualInt != expectedInt) {
      failWithMessage(assertjErrorMessage, actual, expectedInt, actualInt);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's integer is equal to the given one.
   * @param integer the given integer to compare the actual Primitives's integer to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's integer is not equal to the given one.
   */
  public PrimitivesAssert hasInteger(Integer integer) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting integer of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Integer actualInteger = actual.getInteger();
    if (!Objects.areEqual(actualInteger, integer)) {
      failWithMessage(assertjErrorMessage, actual, integer, actualInteger);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's integer is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's integer is not <code>null</code>.
   */
  public PrimitivesAssert hasNullInteger() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting integer of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Integer actualInteger = actual.getInteger();
    if (actualInteger != null) {
      failWithMessage(assertjErrorMessage, actual, actualInteger);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's integer is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's integer is <code>null</code>.
   */
  public PrimitivesAssert hasNotNullInteger() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting integer of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Integer actualInteger = actual.getInteger();
    if (actualInteger == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's long is equal to the given one.
   * @param expectedLong the given long to compare the actual Primitives's long to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's long is not equal to the given one.
   */
  public PrimitivesAssert hasLong(long expectedLong) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting long of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualLong = actual.getLong();
    if (actualLong != expectedLong) {
      failWithMessage(assertjErrorMessage, actual, expectedLong, actualLong);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's longWrapper is equal to the given one.
   * @param longWrapper the given longWrapper to compare the actual Primitives's longWrapper to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's longWrapper is not equal to the given one.
   */
  public PrimitivesAssert hasLongWrapper(Long longWrapper) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting longWrapper of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Long actualLongWrapper = actual.getLongWrapper();
    if (!Objects.areEqual(actualLongWrapper, longWrapper)) {
      failWithMessage(assertjErrorMessage, actual, longWrapper, actualLongWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's longWrapper is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's longWrapper is not <code>null</code>.
   */
  public PrimitivesAssert hasNullLongWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting longWrapper of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Long actualLongWrapper = actual.getLongWrapper();
    if (actualLongWrapper != null) {
      failWithMessage(assertjErrorMessage, actual, actualLongWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's longWrapper is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's longWrapper is <code>null</code>.
   */
  public PrimitivesAssert hasNotNullLongWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting longWrapper of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Long actualLongWrapper = actual.getLongWrapper();
    if (actualLongWrapper == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's short is equal to the given one.
   * @param expectedShort the given short to compare the actual Primitives's short to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's short is not equal to the given one.
   */
  public PrimitivesAssert hasShort(short expectedShort) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting short of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    short actualShort = actual.getShort();
    if (actualShort != expectedShort) {
      failWithMessage(assertjErrorMessage, actual, expectedShort, actualShort);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's shortWrapper is equal to the given one.
   * @param shortWrapper the given shortWrapper to compare the actual Primitives's shortWrapper to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's shortWrapper is not equal to the given one.
   */
  public PrimitivesAssert hasShortWrapper(Short shortWrapper) {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting shortWrapper of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Short actualShortWrapper = actual.getShortWrapper();
    if (!Objects.areEqual(actualShortWrapper, shortWrapper)) {
      failWithMessage(assertjErrorMessage, actual, shortWrapper, actualShortWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's shortWrapper is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's shortWrapper is not <code>null</code>.
   */
  public PrimitivesAssert hasNullShortWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting shortWrapper of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    Short actualShortWrapper = actual.getShortWrapper();
    if (actualShortWrapper != null) {
      failWithMessage(assertjErrorMessage, actual, actualShortWrapper);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Primitives's shortWrapper is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual Primitives's shortWrapper is <code>null</code>.
   */
  public PrimitivesAssert hasNotNullShortWrapper() {
    // check that actual Primitives we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting shortWrapper of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    Short actualShortWrapper = actual.getShortWrapper();
    if (actualShortWrapper == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

}
