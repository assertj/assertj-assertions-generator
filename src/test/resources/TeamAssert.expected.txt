package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link Team} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TeamAssert extends AbstractAssert<TeamAssert, Team> {

  /**
   * Creates a new <code>{@link TeamAssert}</code> to make assertions on actual Team.
   * @param actual the Team we want to make assertions on.
   */
  public TeamAssert(Team actual) {
    super(actual, TeamAssert.class);
  }

  /**
   * An entry point for TeamAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myTeam)</code> and get specific assertion with code completion.
   * @param actual the Team we want to make assertions on.
   * @return a new <code>{@link TeamAssert}</code>
   */
  public static TeamAssert assertThat(Team actual) {
    return new TeamAssert(actual);
  }

  /**
   * Verifies that the actual Team's division is equal to the given one.
   * @param division the given division to compare the actual Team's division to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Team's division is not equal to the given one.
   */
  public TeamAssert hasDivision(String division) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting division of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDivision = actual.getDivision();
    if (!Objects.areEqual(actualDivision, division)) {
      failWithMessage(assertjErrorMessage, actual, division, actualDivision);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team's name is equal to the given one.
   * @param name the given name to compare the actual Team's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Team's name is not equal to the given one.
   */
  public TeamAssert hasName(String name) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.name;
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team's oldNames contains the given String elements.
   * @param oldNames the given elements that should be contained in actual Team's oldNames.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's oldNames does not contain all given String elements.
   */
  public TeamAssert hasOldNames(String... oldNames) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (oldNames == null) failWithMessage("Expecting oldNames parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.oldNames).contains(oldNames);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team's oldNames contains <b>only<b> the given String elements and nothing else in whatever order.
   * 
   * @param oldNames the given elements that should be contained in actual Team's oldNames.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's oldNames does not contain all given String elements and nothing else.
   */
  public TeamAssert hasOnlyOldNames(String... oldNames) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (oldNames == null) failWithMessage("Expecting oldNames parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.oldNames).containsOnly(oldNames);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team's oldNames does not contain the given String elements.
   *
   * @param oldNames the given elements that should not be in actual Team's oldNames.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's oldNames contains any given String elements.
   */
  public TeamAssert doesNotHaveOldNames(String... oldNames) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (oldNames == null) failWithMessage("Expecting oldNames parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.oldNames).doesNotContain(oldNames);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team has no oldNames.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's oldNames is not empty.
   */
  public TeamAssert hasNoOldNames() {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have oldNames but had :\n  <%s>";
    
    // check
    if (actual.oldNames.length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.oldNames));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Team's players contains the given org.assertj.assertions.generator.data.nba.Player elements.
   * @param players the given elements that should be contained in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players does not contain all given org.assertj.assertions.generator.data.nba.Player elements.
   */
  public TeamAssert hasPlayers(org.assertj.assertions.generator.data.nba.Player... players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.Player varargs is not null.
    if (players == null) failWithMessage("Expecting players parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.players, players);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team's players contains <b>only<b> the given org.assertj.assertions.generator.data.nba.Player elements and nothing else in whatever order.
   * @param players the given elements that should be contained in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players does not contain all given org.assertj.assertions.generator.data.nba.Player elements.
   */
  public TeamAssert hasOnlyPlayers(org.assertj.assertions.generator.data.nba.Player... players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.Player varargs is not null.
    if (players == null) failWithMessage("Expecting players parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.players, players);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team's players does not contain the given org.assertj.assertions.generator.data.nba.Player elements.
   *
   * @param players the given elements that should not be in actual Team's players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players contains any given org.assertj.assertions.generator.data.nba.Player elements.
   */
  public TeamAssert doesNotHavePlayers(org.assertj.assertions.generator.data.nba.Player... players) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given org.assertj.assertions.generator.data.nba.Player varargs is not null.
    if (players == null) failWithMessage("Expecting players parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.players, players);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team has no players.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's players is not empty.
   */
  public TeamAssert hasNoPlayers() {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have players but had :\n  <%s>";
    
    // check
    if (actual.players.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.players);
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Team's points contains the given int[] elements.
   * @param points the given elements that should be contained in actual Team's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's points does not contain all given int[] elements.
   */
  public TeamAssert hasPoints(int[]... points) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.points, points);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team's points contains <b>only<b> the given int[] elements and nothing else in whatever order.
   * @param points the given elements that should be contained in actual Team's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's points does not contain all given int[] elements.
   */
  public TeamAssert hasOnlyPoints(int[]... points) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.points, points);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team's points does not contain the given int[] elements.
   *
   * @param points the given elements that should not be in actual Team's points.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's points contains any given int[] elements.
   */
  public TeamAssert doesNotHavePoints(int[]... points) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check that given int[] varargs is not null.
    if (points == null) failWithMessage("Expecting points parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.points, points);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team has no points.
   * @return this assertion object.
   * @throws AssertionError if the actual Team's points is not empty.
   */
  public TeamAssert hasNoPoints() {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have points but had :\n  <%s>";
    
    // check
    if (actual.points.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.points);
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
     * Verifies that the actual Team's rank is equal to the given one.
     * @param rank the given rank to compare the actual Team's rank to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Team's rank is not equal to the given one.
     */
    public TeamAssert hasRank(int rank) {
      // check that actual Team we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting rank of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      int actualRank = actual.rank;
      if (actualRank != rank) {
        failWithMessage(assertjErrorMessage, actual, rank, actualRank);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Team's rank is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param rank the value to compare the actual Team's rank to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Team's rank is not close enough to the given value.
   */
  public TeamAssert hasCloseToRank(int rank, int offset) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    int actualRank = actual.rank;
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting rank:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualRank, rank, offset, Math.abs(rank - actualRank));
    
    // check
    Assertions.assertThat(actualRank).overridingErrorMessage(assertjErrorMessage).isCloseTo(rank, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
     * Verifies that the actual Team's victoryRatio is equal to the given one.
     * @param victoryRatio the given victoryRatio to compare the actual Team's victoryRatio to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Team's victoryRatio is not equal to the given one.
     */
    public TeamAssert hasVictoryRatio(double victoryRatio) {
      // check that actual Team we want to make assertions on is not null.
      isNotNull();

      // overrides the default error message with a more explicit one
      String assertjErrorMessage = "\nExpecting victoryRatio of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

      // check
      double actualVictoryRatio = actual.victoryRatio;
      if (actualVictoryRatio != victoryRatio) {
        failWithMessage(assertjErrorMessage, actual, victoryRatio, actualVictoryRatio);
      }

      // return the current assertion for method chaining
      return this;
    }

  /**
   * Verifies that the actual Team's victoryRatio is close to the given value by less than the given offset.
   * <p>
   * If difference is equal to the offset value, assertion is considered successful.
   * @param victoryRatio the value to compare the actual Team's victoryRatio to.
   * @param offset the given offset.
   * @return this assertion object.
   * @throws AssertionError - if the actual Team's victoryRatio is not close enough to the given value.
   */
  public TeamAssert hasCloseToVictoryRatio(double victoryRatio, double offset) {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    double actualVictoryRatio = actual.victoryRatio;
    
    // overrides the default error message with a more explicit one
    String assertjErrorMessage = String.format("\nExpecting victoryRatio:\n  <%s>\nto be close to:\n  <%s>\nby less than <%s> but difference was <%s>",
                                               actualVictoryRatio, victoryRatio, offset, Math.abs(victoryRatio - actualVictoryRatio));
    
    // check
    Assertions.assertThat(actualVictoryRatio).overridingErrorMessage(assertjErrorMessage).isCloseTo(victoryRatio, Assertions.within(offset));

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team is westCoast.
   * @return this assertion object.
   * @throws AssertionError - if the actual Team is not westCoast.
   */
  public TeamAssert isWestCoast() {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.westCoast) {
      failWithMessage("\nExpecting that actual Team is westCoast but is not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Team is not westCoast.
   * @return this assertion object.
   * @throws AssertionError - if the actual Team is westCoast.
   */
  public TeamAssert isNotWestCoast() {
    // check that actual Team we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.westCoast) {
      failWithMessage("\nExpecting that actual Team is not westCoast but is.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

}
