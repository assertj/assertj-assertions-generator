package org.assertj.assertions.generator.data;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * {@link WithPrivateFields} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public class WithPrivateFieldsAssert extends AbstractObjectAssert<WithPrivateFieldsAssert, WithPrivateFields> {

  /**
   * Creates a new <code>{@link WithPrivateFieldsAssert}</code> to make assertions on actual WithPrivateFields.
   * @param actual the WithPrivateFields we want to make assertions on.
   */
  public WithPrivateFieldsAssert(WithPrivateFields actual) {
    super(actual, WithPrivateFieldsAssert.class);
  }

  /**
   * An entry point for WithPrivateFieldsAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myWithPrivateFields)</code> and get specific assertion with code completion.
   * @param actual the WithPrivateFields we want to make assertions on.
   * @return a new <code>{@link WithPrivateFieldsAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static WithPrivateFieldsAssert assertThat(WithPrivateFields actual) {
    return new WithPrivateFieldsAssert(actual);
  }

  /**
   * Verifies that the actual WithPrivateFields's address is equal to the given one.
   * @param address the given address to compare the actual WithPrivateFields's address to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's address is not equal to the given one.
   */
  public WithPrivateFieldsAssert hasAddress(String address) {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting address of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualAddress = actual.getAddress();
    if (!Objects.areEqual(actualAddress, address)) {
      failWithMessage(assertjErrorMessage, actual, address, actualAddress);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's address is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's address is not <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNullAddress() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting address of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualAddress = actual.getAddress();
    if (actualAddress != null) {
      failWithMessage(assertjErrorMessage, actual, actualAddress);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's address is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's address is <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNotNullAddress() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting address of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualAddress = actual.getAddress();
    if (actualAddress == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's city is equal to the given one.
   * @param city the given city to compare the actual WithPrivateFields's city to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's city is not equal to the given one.
   */
  public WithPrivateFieldsAssert hasCity(String city) {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting city of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCity = actual.getCity();
    if (!Objects.areEqual(actualCity, city)) {
      failWithMessage(assertjErrorMessage, actual, city, actualCity);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's city is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's city is not <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNullCity() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting city of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualCity = actual.getCity();
    if (actualCity != null) {
      failWithMessage(assertjErrorMessage, actual, actualCity);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's city is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's city is <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNotNullCity() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting city of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualCity = actual.getCity();
    if (actualCity == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's age is equal to the given one.
   * @param age the given age to compare the actual WithPrivateFields's age to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's age is not equal to the given one.
   */
  public WithPrivateFieldsAssert hasAge(int age) {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting age of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualAge = actual.age;
    if (actualAge != age) {
      failWithMessage(assertjErrorMessage, actual, age, actualAge);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's country is equal to the given one.
   * @param country the given country to compare the actual WithPrivateFields's country to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's country is not equal to the given one.
   */
  public WithPrivateFieldsAssert hasCountry(String country) {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting country of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualCountry = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("country", String.class, actual);
    if (!Objects.areEqual(actualCountry, country)) {
      failWithMessage(assertjErrorMessage, actual, country, actualCountry);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's country is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's country is not <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNullCountry() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting country of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualCountry = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("country", String.class, actual);
    if (actualCountry != null) {
      failWithMessage(assertjErrorMessage, actual, actualCountry);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's country is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's country is <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNotNullCountry() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting country of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualCountry = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("country", String.class, actual);
    if (actualCountry == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields is minor.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields is not minor.
   */
  public WithPrivateFieldsAssert isMinor() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("minor", Boolean.class, actual)) {
      failWithMessage("\nExpecting that actual WithPrivateFields is minor but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields is not minor.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields is minor.
   */
  public WithPrivateFieldsAssert isNotMinor() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("minor", Boolean.class, actual)) {
      failWithMessage("\nExpecting that actual WithPrivateFields is not minor but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's name is equal to the given one.
   * @param name the given name to compare the actual WithPrivateFields's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's name is not equal to the given one.
   */
  public WithPrivateFieldsAssert hasName(String name) {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("name", String.class, actual);
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's name is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's name is not <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNullName() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualName = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("name", String.class, actual);
    if (actualName != null) {
      failWithMessage(assertjErrorMessage, actual, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's name is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's name is <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNotNullName() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualName = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("name", String.class, actual);
    if (actualName == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's nickname is equal to the given one.
   * @param nickname the given nickname to compare the actual WithPrivateFields's nickname to.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's nickname is not equal to the given one.
   */
  public WithPrivateFieldsAssert hasNickname(String nickname) {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nickname of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualNickname = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("nickname", String.class, actual);
    if (!Objects.areEqual(actualNickname, nickname)) {
      failWithMessage(assertjErrorMessage, actual, nickname, actualNickname);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's nickname is <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's nickname is not <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNullNickname() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nickname of:\n  <%s>\nto be:\n  null\nbut was:\n  <%s>";

    // check
    String actualNickname = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("nickname", String.class, actual);
    if (actualNickname != null) {
      failWithMessage(assertjErrorMessage, actual, actualNickname);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields's nickname is not <code>null</code>.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields's nickname is <code>null</code>.
   */
  public WithPrivateFieldsAssert hasNotNullNickname() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting nickname of:\n  <%s>\nto be:\n  not-null\nbut was:\n  <null>";

    // check
    String actualNickname = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("nickname", String.class, actual);
    if (actualNickname == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields is northernHemisphere.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields is not northernHemisphere.
   */
  public WithPrivateFieldsAssert isNorthernHemisphere() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.FALSE, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("northernHemisphere", Boolean.class, actual))) {
      failWithMessage("\nExpecting that actual WithPrivateFields is northernHemisphere but is not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual WithPrivateFields is not northernHemisphere.
   * @return this assertion object.
   * @throws AssertionError - if the actual WithPrivateFields is northernHemisphere.
   */
  public WithPrivateFieldsAssert isNotNorthernHemisphere() {
    // check that actual WithPrivateFields we want to make assertions on is not null.
    isNotNull();

    // null safe check
    if (Objects.areEqual(Boolean.TRUE, org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("northernHemisphere", Boolean.class, actual))) {
      failWithMessage("\nExpecting that actual WithPrivateFields is not northernHemisphere but is.");
    }

    // return the current assertion for method chaining
    return this;
  }

}
