package org.assertj.assertions.generator.data;

/**
 * {@link WithPrivateFieldsParent} specific assertions - Generated by CustomAssertionGenerator.
 *
 * Although this class is not final to allow Soft assertions proxy, if you wish to extend it, 
 * extend {@link AbstractWithPrivateFieldsParentAssert} instead.
 */
@javax.annotation.processing.Generated(value="assertj-assertions-generator")
public class WithPrivateFieldsParentAssert extends AbstractWithPrivateFieldsParentAssert<WithPrivateFieldsParentAssert, WithPrivateFieldsParent> {

  /**
   * Creates a new <code>{@link WithPrivateFieldsParentAssert}</code> to make assertions on actual WithPrivateFieldsParent.
   * @param actual the WithPrivateFieldsParent we want to make assertions on.
   */
  public WithPrivateFieldsParentAssert(WithPrivateFieldsParent actual) {
    super(actual, WithPrivateFieldsParentAssert.class);
  }

  /**
   * An entry point for WithPrivateFieldsParentAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myWithPrivateFieldsParent)</code> and get specific assertion with code completion.
   * @param actual the WithPrivateFieldsParent we want to make assertions on.
   * @return a new <code>{@link WithPrivateFieldsParentAssert}</code>
   */
  @org.assertj.core.util.CheckReturnValue
  public static WithPrivateFieldsParentAssert assertThat(WithPrivateFieldsParent actual) {
    return new WithPrivateFieldsParentAssert(actual);
  }
}
